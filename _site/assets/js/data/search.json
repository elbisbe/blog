[
  
  {
    "title": "Apache Kafka + Kafka Connect + Emulador de Pub/Sub",
    "url": "/2023/09/25/apache-kafka-kafka-connect-emulador-de-pub-sub/",
    "categories": "Docker, Kafka, WSL",
    "tags": "",
    "date": "2023-09-25 11:46:08 +0200",
    





    
    "snippet": "Uh... ¿hay alguien aquí? Bueno, al menos soy consistente (no escribiendo). Bienvenidos de vuelta a otro post donde hablo un poco de los problemas que me voy encontrando y de cómo los voy solucionan...",
    "content": "Uh... ¿hay alguien aquí? Bueno, al menos soy consistente (no escribiendo). Bienvenidos de vuelta a otro post donde hablo un poco de los problemas que me voy encontrando y de cómo los voy solucionando. Hoy os traigo un problema que me encontré probando una solución local para probar enviar eventos desde un bus de Kafka a un emulador de Google Pub/Sub con el mínimo dolor posible.Empecemos por lo básico:Apache Kafka: Tecnología de Apache que consiste en una cola de mensajes asíncrona. Tienes Producers, que envían mensajes a una cola o Topic, y un Consumer, que lee de manera ordenada y asíncrona el Topic. El Topic está ordenado por particiones y offsets y hay algunas consideraciones más, pero esto es lo fundamental.Kafka Connect: Una herramienta para enviar datos desde y hacia Kafka desde sistemas externos. Hay versiones opensource pero yo he trabajado solo con la solución de Confluence, que es quien comercializa soluciones de Kafka para empresas (dando ACLs y cositas varias). Funciona con un motor principal al que se le añaden microaplicaciones hechas en Java que hacen tareas en concreto.Google Pub/Sub: Otra tecnología de cola de mensajes asíncrona. Tienes Publishers que envían información a un Topic y un Subscriber que lee mensajes del Topic. Parecido, ¿eh? Hay más diferencias pero honestamente no controlo mucho sobre ellas ni son importantes para este post. Okay, queremos conectar los 3 sistemas, y además en local porque somos un poco masocas. Yo ya tengo configurado un entorno en Docker que me levanta un broker de Kafka y un Kafka Connect (algún día, por 2030, os hablaré de mi entorno de WSL + Docker sin Docker Desktop porque es el orgullo de mis amores). Por lo tanto, nos hace falta montar algo para emular un Pub/Sub. Además, necesitamos alguna manera de poder interaccionar con el sistema emulado. Con diferencia de la solución de Apache, Pub/Sub está pensado para ser puramente cloud, por lo que no es tan sencillo como montarse un on-promise en local y ya. Hay alguien en Google que me tiene aprecio y ha publicado amablemente un emulador para el Pub/Sub integrado en medio de su suite de utilidades.Como entenderéis, como loco de Docker, paso de instalar a mano y me voy a buscar la vida para montarme una imagen con las utilidades. Afortunadamente, Google nos proporciona la imagen ya hecha.Por otro lado, el cliente consiste en unas utilidades que dejó Google en un repo de GitHub para interactuar con el emulador. Samaritanos también han hecho una imagen de estas utilidades, pero con el ligero detalle de que están bastante desactualizadas, así que tuve que hacerme un Dockerfile para ponerlo todo un poco al día.Aquí tenéis lo que hace falta añadir a un docker-compose.yml:  pubsub-client:    image: pubsub-python-client:1.0    container_name: pubsub-client    links:      - \"pubsub-emulator\"    environment:      - \"PUBSUB_PROJECT_ID=test-project\"      - \"PUBSUB_EMULATOR_HOST=pubsub-emulator:8538\"    #command: publisher.py test-project create testTopic    tty: true   pubsub-emulator:    image: gcr.io/google.com/cloudsdktool/google-cloud-cli:latest    container_name: pubsub-emulator    ports:      - \"8538:8538\"    command: gcloud beta emulators pubsub start --host-port=0.0.0.0:8538Y aquí el Dockerfile para el pubsub-python-client:1.0:FROM nightfury1204/alpine-curl:latestRUN /bin/shENV ALPINE_VERSION=3.7ENV PACKAGES=\"dumb-init\tmusl\tlibc6-compat\tlinux-headers\tbuild-base\tbash\tgit\tca-certificates\tpython3\tpython3-dev\"RUN /bin/sh -c echo   &amp;&amp; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/testing\" &gt; /etc/apk/repositories   &amp;&amp; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/community\" &gt;&gt; /etc/apk/repositories   &amp;&amp; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main\" &gt;&gt; /etc/apk/repositories   &amp;&amp; apk add --no-cache $PACKAGES ||     (sed -i -e 's/dl-cdn/dl-4/g' /etc/apk/repositories &amp;&amp; apk add --no-cache $PACKAGES)   &amp;&amp; echo \"http://dl-cdn.alpinelinux.org/alpine/v$ALPINE_VERSION/main/\" &gt; /etc/apk/repositories   &amp;&amp; if [[ ! -e /usr/bin/python ]];        then ln -sf /usr/bin/python3 /usr/bin/python; fi   &amp;&amp; if [[ ! -e /usr/bin/python-config ]]; then ln -sf /usr/bin/python3-config /usr/bin/python-config; fi   &amp;&amp; if [[ ! -e /usr/bin/pydoc ]];         then ln -sf /usr/bin/pydoc3 /usr/bin/pydoc; fi   &amp;&amp; if [[ ! -e /usr/bin/easy_install ]];  then ln -sf $(ls /usr/bin/easy_install*) /usr/bin/easy_install; fi   &amp;&amp; easy_install pip   &amp;&amp; pip install --upgrade pip   &amp;&amp; if [[ ! -e /usr/bin/pip ]]; then ln -sf /usr/bin/pip3 /usr/bin/pip; fiENTRYPOINT [\"/usr/bin/dumb-init\"]RUN \"python\"RUN apk add gitRUN git clone https://github.com/googleapis/python-pubsubWORKDIR /python-pubsub/RUN git checkout tags/v2.12.1 -b currentWORKDIR /python-pubsub/samples/snippetsRUN pwdRUN ls RUN pip install -r requirements.txtENTRYPOINT [\"python\"]¿Okay, pues listo, no? Levantamos el bus, el Connect, el cliente y el emulador, creamos topics en los dos buses, enchufamos eventos al bus y creamos un conector para enviarlos a Pub/Sub. Pues no va. Okay, ¿cuál es el problema? Resulta que el emulador es bastante especialito con cómo quiere recibir los eventos, y el conector también se las trae. Primero, el conector de base no admite el hecho de que no haya autentificación (lo cual hace falta para enviar eventos al emulador). Segundo, el emulador hace un handshake SSL incompatible con el sistema cloud (what. the. fuck.) por lo que tienes que establecer un canal de comunicaciones entre el cliente y el emulador sin cifrar, lo cual obviamente tampoco soporta el conector.Está todo descrito en esta página:Pues toca abrir el conector y tocar estas cosillas. Afortunadamente para vosotros, ya lo he hecho para vosotros (al menos en el caso de un conector Kafka --&gt; PubSub) y lo tenéis disponible en este repo de GitHub.[...] gcpCredentialsProvider = NoCredentialsProvider.create();[...]  private void createPublisher() {    ProjectTopicName fullTopic = ProjectTopicName.of(cpsProject, cpsTopic);\tManagedChannel channel = ManagedChannelBuilder.forTarget(cpsEndpoint).usePlaintext().build();\tTransportChannelProvider channelProvider = FixedTransportChannelProvider.create(GrpcTransportChannel.create(channel));\t\tcom.google.cloud.pubsub.v1.Publisher.Builder builder = \t\tPublisher.newBuilder(fullTopic)\t\t\t.setChannelProvider(channelProvider)\t\t\t.setCredentialsProvider(gcpCredentialsProvider);    try {      publisher = builder.build();    } catch (Exception e) {      throw new RuntimeException(e);    }  }Recomplilas el conector, lo pones en el Connect, reintentas y ¡voilà! Eventos de Kafka a PubSub. Afortunadamente, los problemas del emulador no los sufres en un entorno real, porque el conector se conecta sin problema a Google, suponiendo que no tengas mucho firewall dando problemas por en medio (lo cual puede ser un problemilla, ya que el conector no admite de manera nativa ningún tipo de conexión por proxy, así que te la tienes que picar a manini).Hasta aquí mi historia de hoy. Nos vemos quien sabe cuando para hablaros de otras cosas totalmente irrisorias que me asolan en el curro. ¡Chao! "
  },
  
  {
    "title": "Cómo recuperar un long de HBase y no morir en el intento",
    "url": "/2021/03/13/como-recuperar-un-long-de-hbase-y-no-morir-en-el-intento/",
    "categories": "HBase",
    "tags": "",
    "date": "2021-03-13 13:44:25 +0100",
    





    
    "snippet": "¿Recordáis cuando iba a intentar ser consistente a la hora de escribir en el blog? JÁ.En fin, hoy os vengo a hablar de un detalle que me rompió la cabeza durante una temporada y he conseguido soluc...",
    "content": "¿Recordáis cuando iba a intentar ser consistente a la hora de escribir en el blog? JÁ.En fin, hoy os vengo a hablar de un detalle que me rompió la cabeza durante una temporada y he conseguido solucionar de manera relativamente eficaz:Quien haya trabajo con HBase y su shell, se habrá encontrado con los siguientes datos alguna vez:ROW            COLUMN+CELL111222333      column=FAM1:ID, timestamp=1611977689866, value=111222333111222333      column=FAM1:DAT1, timestamp=1611977689866, value=DAT1111222333      column=FAM1:DAT2, timestamp=1611977689866, value=\\x00\\x00\\x01t\\xD1\\x93\\x1Fp¿Y qué demonios es lo que pone ahí? Vais a vuestro código que se ha encargado de insertar un registro en HBase y véis que lo habéis guardado como un Long (que en Java ocupa 8 bytes)... pero eso no son 8 bytes.Sin embargo, podéis encontrar los bytes de vuelta si se ven de la siguiente manera:\\x00 \\x00 \\x01 t \\xD1 \\x93 \\x1F pResulta que como muestra la información por pantalla HBase es mediante arrays de caracteres que además no son \"type-aware\", y resulta que escapa en hexa todos los caracteres que son ASCII imprimible, y deja tal cual caracteres que no puede imprimir. Si miramos qué rango de caracteres se encuentra dentro de ASCII imprimible, vemos que son 128 caracteres (00 a 7F), pero sospecho que no transforma caracteres de 00 a 1F ya que son símbolos de control, usando realmente 20 a 7F. Básicamente, si puede pasarlo a ASCII imprimible, pasará el byte a ASCII, y si no puede, lo dejará en hexa.Vamos a hacer el ejercicio de pasar a mano a transformar de vuelta estos bytes al long original, primero pasando a un array de bytes unsigned en decimal:\\x00 --&gt; 00h, 000d\\x00 --&gt; 00h, 000d\\x01 --&gt; 01h, 001dt    --&gt; 74h, 116d\\xD1 --&gt; D1h, 209d\\x93 --&gt; 93h, 147d\\x1F --&gt; 1Fh, 031dp    --&gt; 70h, 112dQuedándonos el array siguiente:[0,0,1,116,209,147,31,112]Solo nos quedaría multiplicar los valores por su término correspondiente (hacer un shift de bytes):000*2^(7*8) --&gt; 0000*2^(6*8) --&gt; 0001*2^(5*8) --&gt; 1099511627776116*2^(4*8) --&gt; 498216206336209*2^(3*8) --&gt; 3506438144147*2^(2*8) --&gt; 9633792031*2^(1*8) --&gt; 7936112*2^(0*8) --&gt; 112SUM = 0 + 0 + 1099511627776 + 498216206336 + 3506438144 + 9633792 + 7936 + 112 = 1601243914096A los que estén relativamente puestos con tiempo Unix, verán que es un triste timestamp en ms (en concreto del 27 de noviembre de 2020).Pero hacer esto a mano es un poco infierno. ¿Seguro que hay alguna manera de hacer esto programáticamente, verdad? Pues os traigo 2 soluciones de mi propia cosecha, 1 en JavaScript y otra en Scala, donde introduciendo el string que nos da HBase nos devuelve el querido long. Cada implementación tiene sus características (JavaScript no se lleva excesivamente bien con trabajar a nivel de byte, y hay que tirar de un ArrayBuffer, y hay que tener cuidado con que si es unsigned o signed bytes, ya que para Java sus primitivos son con signo), pero hacen bastante bien su trabajo. Os lo dejo a continuación.JavaScript:function toBytes(array){        var arr = new ArrayBuffer(8);    var view = new DataView(arr);    for (i in array) {        view.setUint8(i, array[i], false);    }    return view.getBigInt64();}function expandHBaseHex(input){    if (input.length &gt; 2){        var p1 = input.substr(0,2);        var p2 = input[2].charCodeAt(0);        return [parseInt(\"0x\"+p1), p2]    }    else return [parseInt(\"0x\"+input)]}function HBaseHexToString(str){    var a = str.replace(/\\\\x/, \"\").split(\"\\\\x\");    console.log(a);    var b = a.flatMap(expandHBaseHex);    console.log(b);    var c = toBytes(b);    return c;}HBaseHexToString(\"\\\\x00\\\\x00\\\\x01t\\\\xD1\\\\x93\\\\x1Fp\") // escapar las barras que si no lo entiende como hexaScala:import java.nio.ByteBufferdef HBaseHexToBytes (str: String) = {val t1 = str.replaceFirst(\"^\\\\\\\\x\", \"\").split(\"\\\\\\\\x\").flatMap{ x =&gt;\tif (x.length &gt; 2) { // tiene parte de hex + parte char\t\tvar p1 = x.substring(0,2)\t\tvar p2 = x.apply(2).toHexString\t\tSeq(Integer.parseInt(p1,16),Integer.parseInt(p2,16))\t\t}\telse Seq(Integer.parseInt(x,16))}t1.map(_.toByte)}def transformHBaseHexToLong(str: String) = ByteBuffer.wrap(HBaseHexToBytes(str)).getLong()transformHBaseHexToLong(\"\\\\x00\\\\x00\\\\x01t\\\\xD1\\\\x93\\\\x1Fp\")¡Y hasta aquí el artículo de hoy! Espero que os haya sido de utilidad, y si no, pues que al menos os resulte interesante. ¡Hasta la próxima!"
  },
  
  {
    "title": "Enlacemanía [I]",
    "url": "/2021/02/13/enlacemania-i/",
    "categories": "Enlacemanía",
    "tags": "",
    "date": "2021-02-13 20:27:50 +0100",
    





    
    "snippet": "A ver como explico esto. Por las -1 personas que todavía recuerden que mi blog existen, habrán notado que no hago un uso exhausto de él, ni se puede decir que sea la obra de literatura más extensa ...",
    "content": "A ver como explico esto. Por las -1 personas que todavía recuerden que mi blog existen, habrán notado que no hago un uso exhausto de él, ni se puede decir que sea la obra de literatura más extensa que se haya escrito. Llevo tiempo queriendo escribir en él, pero nunca he sabido en qué pudiera orientar distintos artículos sin tampoco meterme mucho al trapo pero intentando dar un poco de luz en los temas más oscuros donde me esté metiendo (aunque sea obvio para algunos otros). Así que se me ha ocurrido esta idea: Escribir los findes de los artículos más interesantes que me haya encontrado durante la semana de la que trabajo. Si durante una semana no saco suficiente chicha para otro post (eso es que he tenido una semana tranquila) lo acumularé y lo sacaré eventualmente. Espero que le sirva a alguien tanto como me sirvieron a mí, supongo. Allá vamos:Aviso: el contenido de los artículos está bastante relacionado con Java, Scala y Spark.Resulta que en Scala no es lo mismo un Int (es la definición interna de Scala de un entero, scala.Int) que un Integer (que es el clásico java.lang.Integer). Aunque por lo general hay conversiones de manera implícita, parece que usando Option[] esta conversión no se la traga Java, lo cual es curioso, parece que tiene que ver con el tratamiento que hace Spark de las case classes para inferir el schema para los DataFrames. [Link]Me hacía falta comprobar si un string era todo dígitos o no, y éste método me pareció bastante sencillo. [Link]Por shenanigans probé a unir un Dataset de Spark Batch y Structured Streaming. Spoiler: no funciona [Link] [Link]En HBase puedes hacer un get de una fila en concreto o un scan que analiza en una tabla las filas que te hagan falta. Aunque en principio intenté hacer un scan eficiente delimitando el principio y el fin de los rows a buscar, parece que sigue siendo x10 más rápido tirar de un get. Este link en concreto contradice lo que acabo de decir, pero me imagino que dependerá del número de regiones de tu HBase y otros detalles técnicos que escapan a mi entendimiento. [Link variado]Sabéis AWK? Bueno, existe esto. Ya me lo agradeceréis.Estuve intentando comprender cómo iba el tema de logging y log4j en Scala, y resulta que es que en cada clase te creas el log correspondiente a esa clase e informas desde ahí con tus warn y tus info. ¡Y yo pensando que usabas un solo logger! Lo hace bastante cómodo porque el propio logger te informa de su clase y tal. TheMoreYouKnow™ [Link]Y por último, os dejo una línea de la expresión más bonita que he visto en mucho tiempo en programming: Flatteneando con estilo¡Hasta aquí el artículo de hoy! Nos vemos pronto. ¡Chao!"
  },
  
  {
    "title": "Protip: vscode, CLRF y scripts de Bash",
    "url": "/2019/11/16/protip-vscode-clrf-y-scripts-de-bash/",
    "categories": "Sin categoría",
    "tags": "",
    "date": "2019-11-16 09:54:44 +0100",
    





    
    "snippet": "¡Hola!¿Has intentado alguna vez hacer un export en un script de bash? ¿No te funciona?¿Haces \"export\" en el terminal y te sale algo como esto?$ export-- LO QUE SALE\"eclare -x TEST1=\"mequieropegarun...",
    "content": "¡Hola!¿Has intentado alguna vez hacer un export en un script de bash? ¿No te funciona?¿Haces \"export\" en el terminal y te sale algo como esto?$ export-- LO QUE SALE\"eclare -x TEST1=\"mequieropegaruntiro\"eclare -x TEST2=\"mequieropegarotrotiro-- LO QUE DEBERIA SALIRdeclare -x TEST1=\"mequieropegaruntiro\"declare -x TEST2=\"mequieropegarotrotiro\" ¡No te preocupes! Soy tú 3 horas en el futuro, con la solución en la mano.Resulta que tu editor favorito de texto (en mi caso vscode) pone a default la línea nueva como CRLF (Carriage Return, vuelve al comienzo de la línea + Line Feed, salta a la siguiente línea). PUES NO LE GUSTA CR EN LOS SCRIPTS MUCHO A BASH, FÍJATE TÚ. ¿Solución? Asegurarse que tu editor sólo pone LF en línea nueva ya sea viendo estos caracteres en el editor (eso es para tí enfermo del Notepad++) o en vscode selecciona la opción de LF abajo a la derecha, según relata la siguiente imagen:tilt over 9000Si he llegado a tiempo, estás bailando de alegria y llenos de ilusión, y disfrutarás feliz del fin de semana. O puedes haber llegado tarde. Bienvenido al club.¡Nos vemos!"
  },
  
  {
    "title": "PPWT Londres, SQLSat Madrid ‘19 y ¿ahora qué?",
    "url": "/2019/10/14/ppwt-londres-sqlsat-madrid-19-y-ahora-que/",
    "categories": "Sin categoría",
    "tags": "",
    "date": "2019-10-14 18:12:07 +0200",
    





    
    "snippet": "¡Buenas!&nbsp;Como&nbsp;sabéis, soy un&nbsp;desastre&nbsp;manteniendo&nbsp;este&nbsp;blog y&nbsp;mantener&nbsp;un&nbsp;registro&nbsp;de lo que&nbsp;hago&nbsp;me&nbsp;resulta&nbsp;imposible,&nbsp;as...",
    "content": "¡Buenas!&nbsp;Como&nbsp;sabéis, soy un&nbsp;desastre&nbsp;manteniendo&nbsp;este&nbsp;blog y&nbsp;mantener&nbsp;un&nbsp;registro&nbsp;de lo que&nbsp;hago&nbsp;me&nbsp;resulta&nbsp;imposible,&nbsp;así&nbsp;que ¡voy&nbsp;a&nbsp;intentar&nbsp;ponerme&nbsp;un&nbsp;poco&nbsp;al&nbsp;día!&nbsp;Durante este verano he ido a 2 eventos como speaker: Power Platform World Tour @ London, 2019&nbsp;En&nbsp;este&nbsp;evento&nbsp;me&nbsp;aceptaron&nbsp;junto con @ambynet&nbsp;una&nbsp;charla&nbsp;acerca&nbsp;de la&nbsp;integración&nbsp;de Python y&nbsp;R en&nbsp;Power BI de&nbsp;manera&nbsp;local, lo&nbsp;cual&nbsp;otorga&nbsp;nuevas&nbsp;funcionalidades&nbsp;a la&nbsp;herramienta,&nbsp;desde&nbsp;descomprimir&nbsp;un zip hasta&nbsp;correr&nbsp;sklearn&nbsp;en local y&nbsp;portar&nbsp;los&nbsp;datos&nbsp;como&nbsp;un&nbsp;paso&nbsp;de&nbsp;PowerQuery.&nbsp;Fue&nbsp;en la zona de Borough, en&nbsp;Londres,&nbsp;durante&nbsp;dos&nbsp;días.&nbsp;Hubieron&nbsp;speakers de&nbsp;altísimo&nbsp;nivel&nbsp;y de&nbsp;todas&nbsp;partes&nbsp;del&nbsp;mundo,&nbsp;desde&nbsp;Jen Stirrup con AI hasta Will Thompson junto con&nbsp;otros&nbsp;miembros&nbsp;del&nbsp;equipo&nbsp;de&nbsp;producto,&nbsp;hablando&nbsp;de&nbsp;tú&nbsp;a&nbsp;tú&nbsp;con&nbsp;líderes&nbsp;de la&nbsp;comunidad&nbsp;y&nbsp;respondiendo&nbsp;a&nbsp;respuestas&nbsp;candentes&nbsp;en&nbsp;cuanto&nbsp;al&nbsp;desarrollo&nbsp;y&nbsp;futuro&nbsp;de la&nbsp;herramienta.&nbsp;&nbsp;Estuvo&nbsp;muy&nbsp;bien&nbsp;organizado,&nbsp;numerosos&nbsp;tracks y local&nbsp;excelente. Un placer&nbsp;haber&nbsp;podido&nbsp;tener&nbsp;la&nbsp;oportunidad&nbsp;de&nbsp;dar&nbsp;una&nbsp;charla&nbsp;en un&nbsp;evento&nbsp;de&nbsp;tal&nbsp;calibre, e&nbsp;intentaré&nbsp;sin&nbsp;duda&nbsp;asistir&nbsp;a la&nbsp;próxima&nbsp;edición,&nbsp;si&nbsp;no&nbsp;otro&nbsp;evento&nbsp;antes.&nbsp;SQL Saturday Madrid, 2019&nbsp;Qué&nbsp;se&nbsp;puede&nbsp;decir&nbsp;que no se&nbsp;haya&nbsp;dicho&nbsp;ya&nbsp;del Saturday de Madrid,&nbsp;aparte&nbsp;del&nbsp;increíble&nbsp;salto&nbsp;en&nbsp;calidad&nbsp;con&nbsp;respecto&nbsp;al&nbsp;año&nbsp;pasado. El&nbsp;traspaso&nbsp;a la&nbsp;Politécnica&nbsp;y a la ETSI ha&nbsp;mejorado&nbsp;las&nbsp;instalaciones&nbsp;del&nbsp;evento&nbsp;sobremanera, y&nbsp;aunque&nbsp;hubo&nbsp;intentos&nbsp;de&nbsp;complicarse&nbsp;las&nbsp;charlas&nbsp;(Internet en las&nbsp;universidades&nbsp;suele&nbsp;ser una&nbsp;complicación&nbsp;desde&nbsp;el punto de vista de&nbsp;seguridad)&nbsp;todo&nbsp;se&nbsp;planeó&nbsp;correctamente&nbsp;y&nbsp;todo&nbsp;aquel&nbsp;que&nbsp;necesitó,&nbsp;tuvo.&nbsp;Aquí&nbsp;tuve&nbsp;la&nbsp;oportunidad&nbsp;de&nbsp;hablar&nbsp;de la&nbsp;integración&nbsp;de Web y el&nbsp;uso&nbsp;de APIs para&nbsp;usar&nbsp;aplicaciones&nbsp;Web, con el&nbsp;objetivo&nbsp;de&nbsp;quitarle&nbsp;el&nbsp;miedo&nbsp;en el&nbsp;cuerpo&nbsp;a la&nbsp;gente&nbsp;acerca&nbsp;de&nbsp;estos&nbsp;temas.&nbsp;Aparte,&nbsp;tuvimos&nbsp;muchos&nbsp;gansos&nbsp;y&nbsp;muchos&nbsp;juegos,&nbsp;así&nbsp;que&nbsp;intenté&nbsp;que&nbsp;fuera&nbsp;lo&nbsp;más&nbsp;entretenida&nbsp;posible.&nbsp;La&nbsp;organización&nbsp;excelente, y la&nbsp;calidad&nbsp;de los speakers brutal.&nbsp;Desde&nbsp;charlas&nbsp;sobre&nbsp;las&nbsp;novedades&nbsp;de SQL Server 19 hasta Churn Norris, un&nbsp;evento&nbsp;para&nbsp;todos&nbsp;los&nbsp;públicos&nbsp;del&nbsp;mundo&nbsp;de los&nbsp;datos,&nbsp;donde&nbsp;en&nbsp;cualquier&nbsp;sesión&nbsp;te&nbsp;puedes&nbsp;llevar&nbsp;algo,&nbsp;te&nbsp;sea&nbsp;conocido&nbsp;el&nbsp;tema&nbsp;o no.&nbsp;Destacar&nbsp;la&nbsp;sesión&nbsp;de Woman In Tech, un&nbsp;grupo&nbsp;de&nbsp;usuarios&nbsp;pero&nbsp;sobre&nbsp;todo&nbsp;usuarias&nbsp;con el&nbsp;objetivo&nbsp;de&nbsp;empoderar&nbsp;el&nbsp;papel&nbsp;de speakers en el&nbsp;mundo&nbsp;femenino, que&nbsp;lamentablemente&nbsp;sigue&nbsp;a&nbsp;unos&nbsp;niveles&nbsp;totalmente&nbsp;desbalanceados, y&nbsp;aspira&nbsp;a&nbsp;aspirar&nbsp;al gran&nbsp;porcentaje&nbsp;de población&nbsp;femenina&nbsp;que&nbsp;asiste&nbsp;al&nbsp;evento&nbsp;a&nbsp;dar&nbsp;una&nbsp;charla&nbsp;y a&nbsp;abrirse&nbsp;paso&nbsp;en la&nbsp;comunidad, que son indispensables ideas y puntos de vista de&nbsp;todos&nbsp;los géneros.&nbsp;Aparte,&nbsp;agradecer&nbsp;la labor de los&nbsp;voluntarios&nbsp;por&nbsp;parte&nbsp;de la Universidad&nbsp;Politécnica, que&nbsp;han&nbsp;sido&nbsp;maravillosas&nbsp;personas con las que&nbsp;trabajar, y que&nbsp;aprovechen&nbsp;este&nbsp;entusiasmo&nbsp;que&nbsp;han&nbsp;tenido&nbsp;a la hora de&nbsp;ayudarnos&nbsp;a&nbsp;organizar&nbsp;el&nbsp;evento&nbsp;para&nbsp;animarse&nbsp;ellos&nbsp;a&nbsp;apuntarse&nbsp;a la&nbsp;comunidad&nbsp;de PASS y&nbsp;donde&nbsp;quieran, que&nbsp;ni&nbsp;la&nbsp;edad&nbsp;y la&nbsp;experiencia&nbsp;son&nbsp;problemas, y&nbsp;si&nbsp;no un&nbsp;servidor, que es un&nbsp;desvergonzado&nbsp;(afortunadamente&nbsp;para bien)&nbsp;Saludos&nbsp;a&nbsp;todos&nbsp;y&nbsp;cada&nbsp;uno&nbsp;de los que&nbsp;contribuyen&nbsp;a que&nbsp;este&nbsp;evento&nbsp;sea&nbsp;posible, y&nbsp;nos&nbsp;vemos&nbsp;el&nbsp;año&nbsp;que&nbsp;viene&nbsp;con&nbsp;más&nbsp;Saturday (¡quizás&nbsp;antes de&nbsp;septiembre&nbsp;y&nbsp;todo!)&nbsp;--&nbsp;Me la he&nbsp;pasado&nbsp;piruleta&nbsp;y&nbsp;agradezco&nbsp;mucho&nbsp;todas&nbsp;las&nbsp;muestras&nbsp;de&nbsp;apoyo&nbsp;y&nbsp;fe&nbsp;que se&nbsp;han&nbsp;depositado&nbsp;en mi persona para&nbsp;estos&nbsp;2&nbsp;eventos, y&nbsp;ahora&nbsp;toca&nbsp;trabajar&nbsp;para&nbsp;merecerme&nbsp;otra&nbsp;subida&nbsp;al&nbsp;escenario.&nbsp;En&nbsp;cuanto&nbsp;a lo que&nbsp;voy&nbsp;a&nbsp;poner&nbsp;por&nbsp;aquí,&nbsp;este&nbsp;es el plan a&nbsp;corto-medio&nbsp;plazo:&nbsp;Escribir&nbsp;artículo/s&nbsp;acerca&nbsp;de la&nbsp;charla&nbsp;de R y Python (con&nbsp;documentación&nbsp;de la&nbsp;charla)&nbsp;Escribir&nbsp;artículo/s&nbsp;acerca&nbsp;de la&nbsp;charla&nbsp;de Web (con&nbsp;documentación)&nbsp;Mantener&nbsp;un&nbsp;poco&nbsp;menos&nbsp;seco&nbsp;el blog y&nbsp;escribir&nbsp;desde&nbsp;cosillas&nbsp;rápidas&nbsp;hasta&nbsp;artículos&nbsp;más&nbsp;extensos&nbsp;(la&nbsp;carpeta&nbsp;de Chrome con&nbsp;cosas&nbsp;para&nbsp;escribir&nbsp;va&nbsp;en los&nbsp;cientos, y&nbsp;sólo&nbsp;pegarse&nbsp;con&nbsp;cosas&nbsp;del&nbsp;trabajo&nbsp;da para un&nbsp;libro)&nbsp;Pero&nbsp;bueno,&nbsp;eso&nbsp;para&nbsp;otro&nbsp;día.&nbsp;¡Nos&nbsp;vemos!&nbsp;"
  },
  
  {
    "title": "VSCode &amp; WSL en Win10",
    "url": "/2019/05/27/vscode-wsl-en-win10/",
    "categories": "Ubuntu / Linux, Windows, WSL",
    "tags": "",
    "date": "2019-05-27 11:26:31 +0200",
    





    
    "snippet": "Por motivos del azar he tenido que trabajar con archivos de texto plano de varios MB de tamaño  y ni Notepad++ ni nuestro abandonware favorito Sublime han podido dar la talla, y decidí probar VSCod...",
    "content": "Por motivos del azar he tenido que trabajar con archivos de texto plano de varios MB de tamaño  y ni Notepad++ ni nuestro abandonware favorito Sublime han podido dar la talla, y decidí probar VSCode. TL;DR funciona espectacular para cualquier cosa que se os ocurra, y cuando sea mayor y un poco menos terrible con la gestión de mi tiempo libre estudiaré sus virtudes y sus grandezas y las pondré por aquí.Hoy voy a hablar de un caso muy bonito: el poder tener en la terminal de VSCode una sesión de WSL para que podamos ahí hacer nuestros CMakes y nuestras cosas chulis de Bash pero en el entorno de Windows 10.Esto que voy a contar viene perfectamente explicado en la siguiente página pero para los no excesivamente dichos en inglés aquí os va un resumen corto:Tened WSL descargado y configurado (duh). Tened cuidado si tenéis varias distros, ya que se usará la predeterminada.Os hace falta también VSCode Insiders, la versión beta de VSCode pero no os preocupéis que trabaja en paralelo a VSCode, con distintas extensiones y configuración así que vuestras cosas de VSCode se quedan sin tocar. (añadid Insiders al PATH durante la instalación que después se hace más sencillo todo)Instalad la extensión Remote Development en Insiders (tened cuidado que el navegador os va a abrir solo seguramente VSCode normal, y que esta extensión solo funciona en Insiders)Abrid VSCode Insiders, váis al terminal y al workspace que queráis usar. Ahí introducís wsl para que se ejecute el subsistema y ya en él ponéis code-insiders .(importante el punto del final, indica que se abra en ese working directory). Si todo va bien os va a ejecutar una nueva ventana donde tendréis en remoto el sistema WSL en el workspace que habéis mandao, y tenéis todo listo para rockear. Si code-insiders no os funciona en el Terminal, es que no me habéis hecho caso e Insiders no está en el PATH. Lo podéis arreglar invocando con F1 al buscador y abriendo una nueva ventana de Remote-WSL, pero es mucho menos estiloso. Os dejo un GIF muy riquín donde podéis ver este paso. ¡Y ya estaría! Tenéis todas las características de VSCode en Win 10 pero en un entorno de desarollo local de Linux, ¡qué más se le puede pedir a la vida!Hay algunos ligeros issues puestos en la página de WSL con ciertas aplicaciones (Git de vez en cuando se marea, Node.js + Firebase le cuesta arrancar, etc) pero para el 97% de los casos debería iros perfecto. Para más detalle mirad la documentación oficial. Para volver de la sesión en remoto, solamente teneís que abrir una nueva ventana de Insiders (CTRL+Shift+N de toda la vida) y ya estáis fuera de WSL, aunque me imagino que si no usabais Insiders antes simplemente abriréis Code normal. Además, como en Code cuando abráis Insiders de nuevo abre la última ventana que habéis cerrado, así que suele cargar vuestra sesión de WSL en remoto para que sea totalmente seamless la experiencia. ¡GUD!Esto es todo por hoy!EDIT: para mi yo futuro, en WSL la ruta de acceso a los archivos de Windows está en $/mnt. You're welcome."
  },
  
  {
    "title": "Shared Folders &amp; Hyper-V: howto",
    "url": "/2018/12/22/shared-folders-hyper-v-howto/",
    "categories": "Sin categoría",
    "tags": "",
    "date": "2018-12-23 00:55:03 +0100",
    





    
    "snippet": "¡Hola! Después de 2398 años sin subir artículo, hoy toca hablar un poco de cómo conseguir un folder compartido entre tu host de máquinas virtuales Hyper-V y tus máquinas cliente.Ya hablaré en otro ...",
    "content": "¡Hola! Después de 2398 años sin subir artículo, hoy toca hablar un poco de cómo conseguir un folder compartido entre tu host de máquinas virtuales Hyper-V y tus máquinas cliente.Ya hablaré en otro momento de porqué estoy usando Hyper-V o porqué me es tan conveniente, pero por hoy vamos a intentar solucionar este problema que tenemos.Tal como viene predeterminado,  el adaptador de red ya hace un buen trabajo metiéndote tanto dentro del dominio local como a la red propia del host, por lo que no hace falta tocar nada. El comienzo es crear en donde queramos una carpeta que se va a compartir en el host, y darle permisos de sharing:Así, damos a un usuario permisos compartidos.  Ahora, dentro de la máquina cliente, vamos a crear una nueva ubicación de red que apunte a la carpeta que acabamos de crear.  Nota: para conocer cómo acceder a esta carpeta podemos acceder a sus propiedades&nbsp;y&nbsp;en&nbsp;\"Compartir\" ver&nbsp;la&nbsp;dirección:Mirar aquí qué dirección hay que ponerAquí necesitaréis iniciar sesión con el usuario y contraseña de la cuenta host.  Nota: recalco&nbsp;contraseña,&nbsp;me&nbsp;daba&nbsp;problemas&nbsp;para&nbsp;conectar&nbsp;a&nbsp;mi&nbsp;cuenta&nbsp;host&nbsp;si&nbsp;ésta&nbsp;no&nbsp;tenía&nbsp;contraseña&nbsp;predeterminada,&nbsp;por&nbsp;lo&nbsp;que&nbsp;yo&nbsp;de&nbsp;vosotros&nbsp;pondría&nbsp;una&nbsp;contraseña&nbsp;a&nbsp;vuestra&nbsp;cuenta.Y con esto, ¡ya tenéis una carpeta compartida! (Se puede cambiar el nombre antes de confirmar)Con este pequeño pero espero que útil artículo, espero que os vaya bien a la hora de añadir carpetas compartidas en vuestras soluciones Hyper-V :^)"
  },
  
  {
    "title": "Windows 10 y entrada por pen: cómo no morir",
    "url": "/2018/04/13/windows-10-y-entrada-por-pen-como-no-morir/",
    "categories": "Sin categoría",
    "tags": "",
    "date": "2018-04-13 12:31:10 +0200",
    





    
    "snippet": "Recordatorio rápido: en el caso de que estemos usando un tablet con Windows 10 y entrada manuscrita (ej. Surface) recordad que hay una opción muy conveniente de deshabilitar: que no acepte entrada ...",
    "content": "Recordatorio rápido: en el caso de que estemos usando un tablet con Windows 10 y entrada manuscrita (ej. Surface) recordad que hay una opción muy conveniente de deshabilitar: que no acepte entrada táctil si hay entrada de pen en ese mismo momento para que no te pille la palma de la mano de la que escribes.Se encuentra buscando Windows Ink o Configuración del Lápiz, y es una de las opciones. Aparte podeis elegir si sois zurdos o diestros y otros detalles útiles."
  },
  
  {
    "title": "Programación en C  | Tamaños de arrays y sizeof()",
    "url": "/2018/04/12/programacion-en-c%E2%80%8A-tamanos-de-arrays-y-sizeof/",
    "categories": "Pro-tips, Teleco Toolbox",
    "tags": "",
    "date": "2018-04-12 22:45:23 +0200",
    





    
    "snippet": "¿Nunca te has preguntado porqué main está definido como \"int main(int argc, char** argv)\" ? Es decir, si nos dan directamente un array con los valores de los argumentos, ¿no es más sencillo correr ...",
    "content": "¿Nunca te has preguntado porqué main está definido como \"int main(int argc, char** argv)\" ? Es decir, si nos dan directamente un array con los valores de los argumentos, ¿no es más sencillo correr un bucle y usar un sizeof como delimitador?¡Pues resulta que no! Al parecer sizeof solo funciona para encontrar la longitud del array si lo aplicas al array original, pero sin embargo si intentamos hacer el sizeof de un puntero, sizeof devolverá el tamaño del puntero y no del array. Por lo tanto, ¡cuando pedimos la longitud del array como argumento (argc) es necesario y no redundante!Sin embargo, ya que argv termina convenientemente en un puntero a NULL se puede jugar un poco alrededor de esto, pero de todas maneras no es buena praxis, siendo lo estándar llevar en otra variable o en una estructura una indicación del tamaño de un array decaido a puntero."
  },
  
  {
    "title": "¿Dónde está /root en el subsistema de Linux de Windows 10?",
    "url": "/2017/09/18/donde-esta-root-en-el-subsistema-de-linux-de-windows-10/",
    "categories": "Pro-tips, Ubuntu / Linux, Windows",
    "tags": "",
    "date": "2017-09-19 01:26:01 +0200",
    





    
    "snippet": "Siguiendo con el repost que os puse el otro día sobre instalar Ubuntu en Windows 10, hoy os traigo un truco bastante sencillo para ubicarse y navegar con el explorador de Windows: saber donde está ...",
    "content": "Siguiendo con el repost que os puse el otro día sobre instalar Ubuntu en Windows 10, hoy os traigo un truco bastante sencillo para ubicarse y navegar con el explorador de Windows: saber donde está root!Según este rico y nutritivo artículo de askubuntu, se ve que root se encuentra enC:\\Users\\Username\\AppData\\Local\\Lxss\\rootfscambiando \"Username\" por vuestro usuario obviamente.Así podéis mover carpetas y archivos como si estuviérais en el Windows clásico y después interactuar con ello dentro de Bash.Saludos!"
  },
  
  {
    "title": "Teleco Toolbox | Unidades logarítmicas",
    "url": "/2017/09/18/teleco-toolbox-unidades-logaritmicas/",
    "categories": "Teleco Toolbox",
    "tags": "",
    "date": "2017-09-18 22:44:03 +0200",
    





    
    "snippet": "¡Hola! Aquí traigo algunas herramientas fundamentales para sobrevivir a una carrera de teleco. Intentaré hacer las explicaciones lo más interesantes y entendibles posible, para alguien con -3 neuro...",
    "content": "¡Hola! Aquí traigo algunas herramientas fundamentales para sobrevivir a una carrera de teleco. Intentaré hacer las explicaciones lo más interesantes y entendibles posible, para alguien con -3 neuronas como un servidor. ¡Que aproveche!Ok. Unidades logarítmicas. Me voy a explayar un poco en explicarlo, por lo que quiera revisar las fórmulas dejaré lo fundamental como chuletario al final. ¿De qué va esto?El quid de la cuestión principal es que es un tipo de unidades que presentan una relación no lineal con el espacio de números naturales. Es decir: la relación entre un número en unidades naturales y un número en logarítmicas no sigue una linea recta, si no que hace una exponencial.¿Para qué me sirve esto?Para empezar, tenemos la función básica decibelio, o dB, que trabaja sobre magnitudes sin unidad:$latex dB =10 log_{10}(x)$donde x no tiene unidad.¡Un momento, senpai! ¿De donde saco yo una magnitud sin unidad?No te preocupes pequeño lacayo, te recuerdo algo que usas mucho y que no tiene unidades: ¡ratios y coeficientes!Hay uno que nos representa a todos los que hemos pasado por asignaturas de modulación de señal: la ganancia de un amplificador (ratio entre la potencia de salida y la potencia de entrada)$latex P_{out}/P_{in}=G$Y habréis oido por ahí algo del estilo:\"... la potencia de salida es 5dbW... \"o\" ...la potencia de entrada es 5 dBm...\"¡¡¿Pero si la potencia tiene unidades?!!Yep, pero fíjate que está expresado en dBW o dbm.:thinking_face:No te preocupes, ahora te lo explico todo:La explicación es que si tenemos una potencia P y la dividimos por 1 W, tenemos una magnitud sin unidad que expresa el valor de P en relación a 1 W de potencia. Voilá!Por ejemplo:$latex P = 2500mW,  \\frac{P}{1W} = 2.5$significando esto que P es 2.5 más grande que 1 W.Ya que P no tiene unidades, podemos expresar este valor en decibelios!$latex P(dBW) =  10log_{10}(\\frac{P}{1W})$$latex P(dBm) = 10log_{10}(\\frac{P}{0.001W})$¡ejemplos!P = 100 W = +20 dBW = +50dbmP = 1 mW = -30dBW = 0 dBmVamos a hablar de los valores clásicos de dB.Empezando por $latex 10 log_{10} (10) = 10 dB$, podemos ver que algo que dé 10 de ratio de ganancia va a dar 10 dBs.¿Entonces, si hay 20dBs hay 20 de ratio de ganancia? ¡Incorrecto! Recuerda los palos que te metieron en Cálculo 1 con los logaritmos:$latex 10 log_{10}[10^{n}] = n 10 log_{10}[10] = 10n$Teniendo en cuenta que $latex G = 10^{n} \\leftrightarrow G(dB) = 10n$En nuestro caso, $latex G = 100 = 10^{2} (n=2)$, por lo que con 20dB,  ¡indicamos un ratio de ganancia de 100 en vez de 20! ¿Recuerdas cuando te dije que era una equivalencia no lineal? Aquí tienes por qué.Te dejo aquí debajo una tabla con los valores de dBs más populares para saberse:(también conviene saber que $latex 10log_{10}[1] = 0dB, 10log_{10}[0] = -\\infty dB$)Como ya os estoy adelantando en la imagen, vamos a mirar cómo operar con estos decibelios:$latex 10log_{10}[x*y] = 10log_{10}[x]+10log_{10}[y]$ y $latex 10log_{10}[x/y] = 10log_{10}[x]- 10log_{10}[y] $Por lo tanto, $latex P_{out} = G*P_{in}$ se escribe en dBs tal que:$latex P_{out}/1mW =G*P_{in}/1mW \\rightarrow \\\\ 10log_{10}[P_{out}/1mW ]=10log_{10}[G*P_{in}/1mW] \\rightarrow \\\\10log_{10}[P_{out}/1mW ]=10log_{10}[G]+10log_{10}[P_{in}/1mW] $Por lo tanto,$latex P_{out}(dBm) = G(dB) + P_{out}(dBm)$De la misma manera se puede demostrar que:$latex P_{out}(dBW) = G(dB) + P_{out}(dBW)$Esto no se debe confundir con esto:$latex 10 dBm + 6dBm \\neq 16 dBm$Los dB se pueden \"sumar\" entre sí, pero ¡no puedes sumar 2 magnitudes convertidas a logaritmo en el dominio logarítmico! (técnicamente sí, pero no tiene ningún sentido matemático, no es la solución que esperas de manera intuitiva)Esto es porque $latex 10 log_{10} [x+y] \\neq 10 log_{10}[x] + 10 log_{10}[y] = 10 log_{10} [x*y]$Para hacer el cambio, hay que volver a W y después regresar al dominio logarímico:$latex P_{1} = 10 dBm = 10^10/10 mW = 10 mW \\, \\\\y \\, P_{2} = 6 dBm = 10^6/10 mW =  4mW \\rightarrow \\\\ P_{T} = P_{1} + P_{2} = 4mW + 10mW = 14mW \\rightarrow \\\\ P_{T}(dBm) = 10 log_{10} (\\frac{14mW}{1mW}) = 11.46 dBm \\neq 16 dBm$Ejemplo práctico:$latex p(1) = 0.25W = 250mW \\rightarrow 10 log_{10} [\\frac{0.25W}{1W}] = -6,020 dBW \\rightarrow 10 log_{10} [\\frac{0.25W}{1mW}] = 23,979 dBm \\\\ G = 13dB, A = 3dB$A)$latex 10^(13/10)*10^(-3/10) * 0.25W = 2,5W \\\\ 10^(13/10)*10^(-3/10) * 250mW = 2500 mW$B)$latex -6dBW + 13dB - 3dB \\rightarrow -6dBW + 10dB = 4dBW \\rightarrow 10^{4/10} = 2,5W \\\\ +24dBm + 13dB - 3dB \\rightarrow +34 dBm \\rightarrow 10^{34/10} = 2500 mW$Chuletario$latex Q = k log_{b}(K) \\rightarrow k log_{b}(\\frac{x_2}{x_1}) \\rightarrow 10 log_{10}(\\frac{P_1}{P_2}) \\rightarrow 20 log_{10} (\\frac{V_1}{V_2})$$latex K = b^{\\frac{Q}{k}} \\rightarrow 10^{\\frac{Q}{10}}$$latex 10dB + 100dB = 110 dB, 10 dBm +20 dBm \\neq 30 dBm$¡Y hasta aquí chicos! Espero que os haya servido un poco, y si no bueno, otra vez será ^^&nbsp;"
  },
  
  {
    "title": "WSL en Windows 10",
    "url": "/2017/09/18/como-instalar-y-usar-bash-de-ubuntu-de-manera-nativa-en-windows-10/",
    "categories": "Ubuntu / Linux, Windows, WSL",
    "tags": "",
    "date": "2017-09-18 21:24:42 +0200",
    





    
    "snippet": "Quien siga un poco más al dia lo que hace la empresa de los 4 cuadraditos sabrá que en su momento Cannonical (la empresa detrás de Ubuntu, una de las distribuciones más usadas de Linux) y Microsoft...",
    "content": "Quien siga un poco más al dia lo que hace la empresa de los 4 cuadraditos sabrá que en su momento Cannonical (la empresa detrás de Ubuntu, una de las distribuciones más usadas de Linux) y Microsoft llegaron a un acuerdo para traer de manera nativa el terminal de ubuntu dentro de Windows 10.Bueno, cualquiera que tenga actualizado Windows 10 a la Anniversary Update (que será practicamente todo el mundo que tenga Windows 10) puede configurar su ordenador para tener Bash en su propio ordenata.Siguiendo tranquilamente esta página web (en inglés, sorry kiddos), podéis ver que hace falta activar el modo desarollador en Windows 10, ir a Sistema, en Características de Windows activar el subsistema de Linux, reiniciar y después instalar bash con un comandito bastante cómodo.Una vez lo tengáis listo ya podéis buscar en vuestro inicio un acceso directo a Bash, pero el mas vaguete se puede hacer un acceso directo al escritorio con este truco que os puse el otro día.Saludos!"
  },
  
  {
    "title": "¿Qué es un VGA?",
    "url": "/2017/09/09/que-es-un-vga/",
    "categories": "Pro-tips",
    "tags": "",
    "date": "2017-09-09 16:39:33 +0200",
    





    
    "snippet": "Este acrónimo puede llevar a algún malentendido más que otro, ya que se ha usado para cosas similares en su tiempo pero muy distintas ahora.Esto que véis aquí es un conector de 15 contactos D submi...",
    "content": "Este acrónimo puede llevar a algún malentendido más que otro, ya que se ha usado para cosas similares en su tiempo pero muy distintas ahora.Esto que véis aquí es un conector de 15 contactos D subminiatura, siendo el conector de pantalla clásico de pantalla de hace una década. No admite audio y la calidad no es la mejor (hoy en día tienes soluciones mejores como DVI o HDMI) pero siempre ha hecho su función como conexión legacy de ordenadores.¿Qué ocurre entonces? A VGA también se les ha llamado otras cosas:- Una pantalla estándar analógica de ordenador, ya que en su momento estos ordenadores tenían solamente esta conexión con la pantalla.- La resolución 640 × 480 píxeles, ya que los monitores que inicialmente soportaron este cable trabajaban a esta resolución.- La tarjeta gráfica que comercializó IBM por primera vez en 1988, y que introdujo este conector.FUENTE"
  },
  
  {
    "title": "Crear acceso directo a cualquier aplicación del Windows Store",
    "url": "/2017/09/02/repost-crear-acceso-directo-a-cualquier-aplicacion-del-windows-store/",
    "categories": "Pro-tips, Windows",
    "tags": "",
    "date": "2017-09-02 18:14:19 +0200",
    





    
    "snippet": "¡Hola! Debido a mi obvia falta de inspiración, y a que encuentro bastantes cosas por ahí, voy a crear una nueva categoría llamada reposts, donde comento algún artículo interesante que encuentro y o...",
    "content": "¡Hola! Debido a mi obvia falta de inspiración, y a que encuentro bastantes cosas por ahí, voy a crear una nueva categoría llamada reposts, donde comento algún artículo interesante que encuentro y os lo dejo.Estaba recientemente dejando mi escritorio listo para comenzar este nuevo el año escolar, y me encontré con un problema: aunque no son muchos, es verdad que uso mucho algunas aplicaciones del sistema o que están en la Windows Store (Recortes es un necesario en mi dia a dia, OneNote también mola tenerlo en el escritorio...)Resulta que hay una carpeta secreta dentro del explorador de archivo que te da acceso a todas las aplicaciones que tienes instaladas, y dándo click derecho te permite crear un acceso directo al escritorio.La carpeta es:%windir%\\explorer.exe shell:::{4234d49b-0245-4df3-b780-3893943456e1}Bastante chulo, ¿verdad?FUENTE"
  },
  
  {
    "title": "Cómo arreglar el estimado de tiempo de lectura en un Kindle Paperwhite",
    "url": "/2017/04/24/como-arreglar-el-estimado-de-tiempo-de-lectura-en-un-kindle-paperwhite/",
    "categories": "Pro-tips",
    "tags": "",
    "date": "2017-04-24 23:28:25 +0200",
    





    
    "snippet": "¡Hola!Hace unos 304982345 años que no subo post, pero bueno, aquí estamos.Hoy vengo a hablar de una cosa que cualquiera que tenga un Kindle le pueda interesar: ¡restaurar el estimado de tiempo de l...",
    "content": "¡Hola!Hace unos 304982345 años que no subo post, pero bueno, aquí estamos.Hoy vengo a hablar de una cosa que cualquiera que tenga un Kindle le pueda interesar: ¡restaurar el estimado de tiempo de lectura!El estimado de tiempo de lectura es un stat bastante interesante que te dan los Kindles. A partir de leer un numero reducido de páginas en un libro, te aproxima de manera bastante acertada cuánto tiempo te queda tanto de capítulo como de libro.El único problema es que a veces se desbalancea a base de avanzar y retroceder en un libro o algún shenganian del estilo, por lo que te interesa reiniciar la estadística.En fín, lo necesario es irse a la barra de búsqueda del Kindle y poner lo siguiente:;ReadingTimeResetCuidado con la tilde y con las mayús! Le das a buscar, y aunque parezca que no ha hecho nada, cuando vuelvas al libro verás que abajo a la izquierda en efecto se ha reiniciado la estadística.¡Espero que os sirva!How to fix Kindle reading time estimates [Paperwhite] - Fuente-E"
  },
  
  {
    "title": "Guía práctica con GDB (GNU Debugger)",
    "url": "/2016/12/07/guia-practica-con-gdb-gnu-debugger/",
    "categories": "Pro-tips, Ubuntu / Linux",
    "tags": "",
    "date": "2016-12-07 01:10:46 +0100",
    





    
    "snippet": "¡Hola! Hoy vemos lo básico sobre GDB, una guía práctica. ¿Qué quiere decir esto? No me pararé a explicar los detalles, simplemente un \"chuletario\" con los comandos más importantes a la hora de debu...",
    "content": "¡Hola! Hoy vemos lo básico sobre GDB, una guía práctica. ¿Qué quiere decir esto? No me pararé a explicar los detalles, simplemente un \"chuletario\" con los comandos más importantes a la hora de debuggear en un command prompt.Para hacer que gdb funcione, necesitar compilar el programa con un parámetro especial, -g.cc -g funcion.cPara iniciar gdb, hacemosgdb a.outVamos a ver los comandos más importantes:Leyenda:&lt;&gt; &lt;- argumento del comando() &lt;- atajo, significa lo mismo que la palabra grandebreak &lt;n&gt; (b) &lt;- Breakpoint en la línea nrun (r) &lt;- Empezar a ejecutar el programa. Llegará hasta el final o hasta el primer breakpointprint &lt;var&gt; (p) &lt;- En un breakpoint, imprime el valor de la variablecontinue (c) &lt;- Continúa la variablenext (n) &lt;- Lee la siguiente línea (sin meterse en funciones)step (s) &lt;- Métete dentro de la función que toquelist (l) &lt;- Lee la línea de código correspondienteinfo locals &lt;- ¡información de todas las variables! muy útilquit (q) &lt;- salir del debugger"
  },
  
  {
    "title": "Shortcut de menú contextual (click derecho) en Windows",
    "url": "/2016/11/24/shortcut-de-menu-contextual-click-derecho-en-windows/",
    "categories": "Pro-tips",
    "tags": "",
    "date": "2016-11-24 01:06:52 +0100",
    





    
    "snippet": "Shift + F10.Algún día lo agradeceréis.E",
    "content": "Shift + F10.Algún día lo agradeceréis.E"
  },
  
  {
    "title": "Git 101",
    "url": "/2016/11/23/git-101/",
    "categories": "101",
    "tags": "",
    "date": "2016-11-24 00:59:36 +0100",
    





    
    "snippet": "¡Hey! Como es costumbre, aquí os traigo unos apuntes de Git, del curso de codecademy.git init &lt;- inicializa en la carpeta un proyecto de git3 lugares:Working Directory -&gt; lugar donde estarás ...",
    "content": "¡Hey! Como es costumbre, aquí os traigo unos apuntes de Git, del curso de codecademy.git init &lt;- inicializa en la carpeta un proyecto de git3 lugares:Working Directory -&gt; lugar donde estarás trabajandoStaging Area -&gt; Changelog de los cambiosRepository -&gt; Lugar donde se quedan los cambios como distintas versiones del proyectoWorkflow =&gt; Editar archivos en el WD, añadir archivos al SA, y guardar los cambios a un directorio de git.Guardar =&gt; Commitgit status =&gt; comprobar el status de los archivosrojo! - ve el archivo pero no ha empezado a seguir los cambios =&gt; meterlo al SAgit add archivo -&gt; añadir archivo al SAactualizar - git add scene-1.txtgit diff scene-1.txt &lt;= compara entre WD y SAgit commit -m \"texto\" - metes un commit al Rgit log - log de commitscada cambio: git add archivo, git commit -m \"Cambio hecho\"git show HEAD -&gt; muestra el log del último commit + cambios hechosgit checkout HEAD archivo -&gt; restaura el archivo desde el último commitpuedes añadir varios archivos al staging area con 1 gitgit add filename_1 filename_2git reset HEAD filename -&gt; restaura el archivo del SA desde el último commitNO HACE CAMBIOS AL ARCHIVO LOCAL, CUIDADO! para eso tenemos checkoutno solamente puedes hacer un reset al HEAD, si no que puedes ir a cualquier commit!Usando los primeros 7 caracteres de un SHA de un commit anteriorej. 07ef01abcfd7a8568a59390f4488ed3581150170 / 07ef01agit reset 5d69206 -&gt; ¡EL HEAD SE CONVIERTE EN ESE COMMIT!1 branch por ahora -&gt; masterpuedes crear más y después unirlo¿dónde estoy? =&gt; git branchcómo crear un nuevo branch =&gt; git branch new_branchtrasladarte al branch nuevo =&gt; git checkout branch_namemezclar el branch =&gt; git merge branch_name - une en contenido de branch_name con master (realmente, con el branch que estés usando)si hay conflicto a la hora de mezclar =&gt; merge conflictgit branch -d branch_name =&gt; delete branchremotes -&gt; repositorio de git remotogit clone localización_remota nombre_de_clongit clone science-quizzes my-quizzes ej.también renombra science-quizzes a origingit remote -v &lt;- te enseña los remotesactualizar el git &lt;- git fetchgit merge origin/master &lt;- une origin/master con el master local1.Fetch and merge changes from the remote2.Create a branch to work on a new project feature3.Develop the feature on your branch and commit your work4.Fetch and merge from the remote again (in case new commits were made while you were working)5.Push your branch up to the remote for review &lt;- PUSHgit push origin your_branch_name &lt;- pasa de vuelta tu branch a origin"
  },
  
  {
    "title": "Cómo generar una red Wi-Fi en tu portatil para Reverse Tethering",
    "url": "/2016/10/25/como-generar-una-red-wi-fi-en-tu-portatil-para-reverse-tethering/",
    "categories": "Instalación, Windows",
    "tags": "",
    "date": "2016-10-25 10:53:50 +0200",
    





    
    "snippet": "Ok, supongamos que eres una persona desgraciada. Tienes un Windows Phone, y obviamente Microsoft es incapaz de hacer un protocolo TTLS decente para poderse conectarse al Wi-Fi de la universidad. Ob...",
    "content": "Ok, supongamos que eres una persona desgraciada. Tienes un Windows Phone, y obviamente Microsoft es incapaz de hacer un protocolo TTLS decente para poderse conectarse al Wi-Fi de la universidad. Obviamente, tienes que seguir compartiendo tus videos de gatos (¿eso sigue existiendo?) por Whatsapp y aportar a tu grupo de Skype favorito con frases tan impactantes como lol o wtf. Entonces descubres el horror: te queda un dia entero y te has quedado sin tarifa de 3G. ¿Qué haces ahora?Necesitas un ordenador con Windows 7+ (seguramente lo tengas, a no ser que uses un Mac sin BootCamp que entonces tu alma no tiene salvación) y permisos de administrador (si usas un ordenador de la uni, ponle morritos a tu IT favorito para que te deje un ordenador con permisos), y probablemente un dongle Wi-Fi por USB.Una vez que tenemos todo lo anterior, vamos al Command Prompt y ponemos NETSH WLAN show drivers:Os tenéis que fijar en la línea resaltada, Hosted network supported: Yes. Si eso pone no, entonces vuestro adaptador no soporta reversión de red (actuar como router) y tendréis que usar otro, por eso probablemente usando un dongle Wi-Fi acertáis porque la mayoría lo permiten.Pasado este paso, tenemos que descargarnos e instalar Virtual Router, una herramienta que realmente no hace falta porque todo se puede hacer por linea de comandos pero a quién no le gusta una bonita interfaz verdad así que la usaremos.Una vez instalada y lista, a mí la primera vez me crasheó hasta que reinicié la máquina así que quedáis avisados. Esta es la interfaz:&nbsp;No hay que ser un lince para darse cuenta que tiene muy pocos parámetros:Network Name (SSID): el nombre de la Wi-Fi que queremos generarPassword: la contraseña, es obligatoria y mínimo de 8 caracteres. Como véis no me como excesivamente la cabezaShared Connection: es la parte más interesante, nos permite definir qué queremos compartir de la red actual con la red que vamos a crear. Como queremos hacer reverse Tethering, habrá que compartir Internet, por lo tanto tiraremos de la Wi-Fi que ya está conectada a la universidad.Le damos a Start Virtual Router, esperamos un poquete, y voliá! Se crea una red WPA bastante sencilla que genera de pocos a 0 problemas de autenticación y ya estamos conectados a Internet.¡Cuidado! La siguiente vez que uses el ordenador, puede que ponga \"Cannot manage Virtual Router, the service is not running\". La solución es ir al administrador de tareas, a la pestaña \"Servicios\" y activar el servicio \"Virtual Router\".Os tiene que quedar algo tal que así, un servicio Virtual Router en RunningYa satisfecha vuestra demanda de videos de gatos podéis volver a vuestro día normal, y esta acción heroica os hace sacar un 5 en ese examen de circuitos el cual te habías tirado la madrugada anterior estudiando.La vida puede ser maravillosa, ¿verdad?E"
  },
  
  {
    "title": "Equivalente de Norton y Thevenin de un circuito DC genérico - LTSpice",
    "url": "/2016/10/22/equivalente-de-norton-y-thevenin-de-un-circuito-dc-generico-ltspice/",
    "categories": "Circuitos",
    "tags": "",
    "date": "2016-10-22 04:03:26 +0200",
    





    
    "snippet": "Ok, todos sufrimos a diario cada vez que tenemos hacer análisis de circuitos y no somos especialmente versados en el manejo de señales excesivamente complicadas. Pero hoy os traigo un atisbo de esp...",
    "content": "Ok, todos sufrimos a diario cada vez que tenemos hacer análisis de circuitos y no somos especialmente versados en el manejo de señales excesivamente complicadas. Pero hoy os traigo un atisbo de esperanza para todos aquellos: ¡LTSpice! Es una herramienta bastante potente, con diferentes tipos de análisis (los iremos viendo en algunos ejemplos), viendo hoy un ejemplo de análisis en punto de operación de continua, o como lo llamarían los contemporáneos ingleses un DC op: sacar voltajes e intensidades de los nudos de un circuito.Esto está muy bien para analizar circuitos ya hechos, pero imaginaos que queremos algo un poquitín más abstracto: sacar equivalentes de Norton y Thevenin (todo estudiante de ingeniería electrónica pasó/pasará por esto), y hacer una comprobación de tu circuito no es especialmente sencillo, complicándose aún más con circuitos con fuentes dependientes y aún peor cuando hablamos de régimenes fasoriales.Pero hoy nos concentraremos en hallar los equivalentes de Thevenin y Norton de un circuito genérico de DC. Voy a tomar este ejemplo del Calvin College, en Michigan, y trabajar con este circuito:Aquí os dejo el enlace completo a la solución, por si queréis comprobar de forma teórica que en efecto, la simulación es correcta.Os voy adelantando: vamos a usar el simulador como si fuera un circuito real, y aunque no tenemos ningún tipo de marcadores para ir midiendo manualmente la tensión o la intensidad entre A y B, podemos hacer algunos trucos para que el análisis del punto de operación nos dé los datos que queramos.Aviso: al tratarse como circuito real, da resultados levemente diferentes a los teóricos, con un error notable a partir de la primera décima, así que tampoco os toméis a pecho las soluciones que dé, más bien como un indicatorio de que lo que estáis haciendo va por buen camino o no.Vamos a hallar primero VTh, la tensión de Thevenin.Montamos el circuito entero en LTSpice, asignamos Va y Vb a los nudos entre los que queremos hacer el equivalente de Thevenin y ponemos Va como tierra del circuito:Simulamos con DC op, y obtenemos lo siguiente:Como vemos, Vb da 4.0909, que redondeado da 4.1, que es el valor teórico de la tensión de Thevenin! Así que no vamos por mal camino.Podemos hacer un cambio muy rápido para medir In, la intensidad de Norton: insertar entre A y B un generador de voltaje de 1V y medir la intensidad que pasa por Vb:Aunque no lo pone en la solución (lo podréis comprobar después cuando veamos Rth con la ley de Ohm) el resultado teórico da alrededor de 0.007A, lo cual vemos está relativamente alejado de la solución que nos da el simulador, 0.0056A. Al menos mantiene el mismo orden de magnitud y estamos hablando del 3er decimal de diferencia, así que tampoco está tan mal.Por último, calculamos la resistencia de la misma manera que en un circuito real: Anulamos generadores independientes y comprobamos la asociación de resistencias. Como es un circuito, podemos hacer también simplemente poner un generador de corriente de 1A, obtener VI1 y después sacar la resistencia a través de la ley de Ohm, Reg = V/I, VI1/1 =&gt; VI1:&nbsp; ¡Precaución! Nos sale resistencia negativa porque en LTSpice siempre el positivo va de - a +, y si os fijais en el circuito nuestra fuente de alimentación auxiliar está al revés, yendo de A a B y por lo tanto en el sentido VBA en vez de VAB.¡Bueno, espero que os haya servido!E."
  },
  
  {
    "title": "C 101",
    "url": "/2016/10/20/c-101-2/",
    "categories": "101",
    "tags": "",
    "date": "2016-10-20 15:13:07 +0200",
    





    
    "snippet": "Empezamos los 101, una serie de \"glosarios\" o cursos donde intento resumir de manera concisa y detallada muchos detalles de algunos lenguajes de programación o algunos lenguajes que si no están rel...",
    "content": "Empezamos los 101, una serie de \"glosarios\" o cursos donde intento resumir de manera concisa y detallada muchos detalles de algunos lenguajes de programación o algunos lenguajes que si no están relacionados directamente con la programación, pueden servir para su desarollo.Este curso será de C, a partir de la experiencia que he adquirido en mi primer año de universidad, con el fin de que sea útil a cualquiera. De todas maneras, toda esta información gratuita sobre el tema se puede encontrar en internet, siendo la madre de las soluciones de las dudas de la programación Stack Exchange y más en concreto, SuperUser.-- EN CONSTRUCCIÓN ---- EN CONSTRUCCIÓN --Aviso: Aunque la mayoría de los ejemplos son de creación propia, algunos están inspirados en mis clases de universidad, así que puede haber algún gazapo que se me haya escapado, sobre todo en los ejemplos más grandes. Además, otros ejemplos o explicaciones están inspiradas en los artículos de tutorialspoint, con muy buenas explicaciones en C.Vamos a organizarlo en unos puntos principales: Variables  Recordatorio básico  Tipos de dato  Asignaciones  Operaciones  Macros  Sentencias y bucles  Lógica de decisión  Sentencias if-else  Sentencias switch  El operador ?:  Bucles while y do-while  Bucles for  Funciones  Sintaxis básica  Argumentos  Variables dentro de funciones: scope  Tablas, o arrays  Punteros  Información básica  C en todo su potencial: uso de memoria  Punteros en el uso de tablas  Punteros para estructuras  Uso de punteros para pasar argumentos  Estructuras  Sintaxis básica de las estructura  Acceso a las estructuras  Estructuras complejas  Strings  Memoria dinámica de memoria  Uso del \"malloc\"  Uso del \"free\"  Segmentation fault y otros errores  Archivos de texto  Lectura de archivos de texto  Escritura de archivos de texto  Miscelánea  Comandos para programar en Terminal (Linux)  Headers o archivos cabecera Códigos ASCII ¡Y empezamos!VariablesEmpezemos por lo básico, por donde comenzaremos a usar el mundo de la programación: las variables. Éstas consisten en los datos que iremos manejando en nuestras aplicaciones. En C tienen la siguiente estructura: primero se declara el tipo de dato (lo vemos en el siguiente punto), después el nombre de nuestra variable, y de forma opcional se puede declarar directamente el valor asociado a la variable.Vamos a ver un ejemplo rápido:[code language=\"cpp\"]int numero = 5;char palabra = &quot;Hola&quot;;// cómo añadir un valor a una variable vacíaint numero;numero = 5; // int numero = 5;[/code]Recordatorio básicoPunto y coma (semicolon, ; ) = En C, el punto y coma es final de línea. Recuerda ponerlo siempre, porque si no C entenderá que sigues en la misma línea.Comentarios (/* */, // ) = El primero pone como comentario todo el texto entre los 2, inclutyendo saltos de linea, y el segundo solamente se pone al principio y pone el frase a partir de ahí en comentario.Identificadores de variable: son sensibles a mayúsculas y minúsculas (hola y Hola son 2 variables diferentes), y no se puede usar \", $ ni % en los identificadores.Palabras clave o keywords: palabras que no se pueden usar como nombre en constantes, variables u otro tipo de identificador. Aquí tienes una lista.Tipos de datoEn C, existe un concepto muy importante llamado tipo de dato. Esto significa que en función del valor de la información el tipo de dato correspondiente es uno u otro, y en C es MUY IMPORTANTE especificar el tipo correcto de tipo de dato, porque esto tiene 2 consecuencias:El tipo de dato influye directamente en la cantidad de memoria que consume el programa, y por lo tanto directamente en su optimización, y como es lo mejor para el programa ser lo más eficiente posible es necesario que el tipo de dato sea el correcto.Lo veremos más adelante cuando hablemos de las funciones, pero es importante ser certero a la hora de especificar el tipo de dato para no crear discrepancias y errores con las funciones que usen estas variables que estamos creando. No os preocupéis, hablaremos de eso en su momento.Por lo tanto, tenemos varios tipos de dato. En este PDF podéis encontrar la explicación completa sobre los distintos tipos de dato.Básicamente los tipos de dato fundamentales son:int (%d): números enteros hasta 2^16.long (%li): números enteros hasta 2^32.float (%f): números reales.double (%lf): números reales de más capacidad.char (%c): caracteres.Lo que aparece al lado es el formato de escritura, es decir, cómo se escribe el tipo de dato para imprimirlo en pantalla. Ahora, cuando avancemos un poco, veremos ejemplos prácticos de esto.Aquí hay otro PDF donde se explica más detalladamente los formatos de escritura.También, cuando estamos escribiendo el formato de escritura, nos pueden aparecer las siguientes opciones:%d =&gt; normal%4d =&gt; número apareciendo a la derecha 4 espacios (para alinear)%.4d =&gt; número con hasta 4 decimales\\n =&gt; salto de líneaAsignacionesAquí trataremos de tratar el tema de las asignaciones, es decir, cuando asignamos el valor a una variable. El problema en C es que hay que tener en cuenta que hay que jugar con la memoria con el fin de entender como realmente afectan nuestras acciones al programa.Como hemos visto, la manera de asignar un valor a una variable es:[code language=\"cpp\"]int prueba = hola;int prueba;prueba = hola;[/code]Sin embargo, veremos que hay algunos factores que pueden complicar esta tarea.Por ejemplo, vamos a ver el caso de asignar una letra, y el caso de asignar una palabra.[code language=\"cpp\"]char letra = &quot;h&quot;;char palabra [5] = {'H', 'e', 'l', 'l', 'o', '&#092;&#048;'};char palabra2 [] = &quot;Hello&quot;;[/code]A medida que vayamos avanzando en el artículo, veremos las particularidades de cada una de las asginaciones.OperacionesComo en la aritmética matemática, tenemos la suma (+), la resta (-), la multiplicación (*) y la división (/).Otro operador importante es el %; que indica el resto de la operación de dividir el número anterior por el posterior (útil para ver si hay números divisibles entre otros y ese tipo de cosas)Un detalle a tener en cuenta, es que la información se guarda en función del tipo de dato en el que estén trabajando.Hay varios tipos de operadores en C: aritméticos, relacionales, lógicos, bit-a-bit, de asignación y otros. Mi mejor consejo es que consultéis aquí el artículo de tutorialspoint donde explican mediante el uso de tablas los distintos operadores y su función. No os preocupéis, los veremos en acción. Nota: con el propósito de mostrar un buen ejemplo, hacemos uso de una parte de C de la que no hemos hablado: las funciones, concretamente la función printf. Lo que nos tenemos que quedar es que es una herramienta a la que introducimos un texto o una variable de cierta manera y esa información se exporta a la consola. Más adelante veremos cómo funciona en detalle la sintaxis de las funciones.   Ejemplo [code language=\"cpp\"]int a = 5;double b = 5;a = a / 3;b = b / 3;printf(a); // OUTPUT: 1printf(b); // OUTPUT: 1,6666[/code]Como podemos ver, cuando el tipo de dato no puede contener decimales (como un int), el resultado de la división/multiplicación se trunca: es decir, se corta hasta el máximo que se pueda almacenar.MacrosAparte de definir variables dentro de nuestra aplicación, o dentro de nuestras funciones, podemos usar una \"variable global\" o macro. Lo que sirve es para crear una variable con un cierto valor que se pueda acceder en cualquier función del mismo documento.  Sintaxis [code language=\"cpp\"]#define + nombre de la variable + valor de la varialeconst + tipo de variable = valor de la variable[/code]  Ejemplo [code language=\"cpp\"]#define PI 3.14int main () {  const int NUMERO = 2;  printf (NUMERO + PI); // OUTPUT 5.14  return 0;}[/code]Sentencias y buclesVamos a comenzar una etapa bastante importante de la programación en C: el uso lógico para la toma de decisiones. Esto es la base de la programación, ya que es lo que vamos a \"programar\", es decir, el objetivo principal de nuestros programas son que analicen una condición y que realizen una condición o otra en función de como esté programado.Podemos encontrar en C los siguientes tipos de sentencias de lógica de decisión:Sentencias ifSentencias if.. elseSentencias if anidadoSentencias switchSentencias switch anidadoLógica de decisiónPodemos encontrar algo claro en la lógica de decisión en C: se parte de una condición. A partir de ahí se analiza la condición: si se cumple, se ejecuta el código de la condición y se sigue con el código siguiente, y si no se cumple (es decir, la condición es falsa), no se ejecuta el código de la condición y se va directamente al código siguiente.En la programación asumimos que cualquier valor distintos de cero y distinto de nulo es verdadero (TRUE), y si es cero o nulo, entonces es falso (FALSE).Sentencias if-else  Sentencia if Una sentencia if consiste de una expresión boleana seguida de una o más sentencias. Sintaxis [code lang=\"cpp\"]if(boolean_expression) {   /* statement(s) will execute if the boolean expression is true */}[/code]Si la expresión boleana es verdadera, entonces el código dentro del if se ejecuta. Si la expresión boleana es falsa, entonces el código al final del if se ejecuta. Sigue existiendo la lógica de decisión. Ejemplo [code lang=\"cpp\"]#include &lt;stdio.h&gt;int main () {   /* local variable definition */   int a = 10;   /* check the boolean condition using if statement */   if( a &lt; 20 ) {      /* if condition is true then print the following */      printf(&quot;a is less than 20\\n&quot; ); // se ejecuta   }   printf(&quot;value of a is : %d\\n&quot;, a); // value of a is : 10   return 0;}x[/code]  Sentencia if... else Una sentencia if puede ser seguida por una sentencia opcional else, que se ejecuta cuando la expresión boleana era falsa. Sintaxis [code lang=\"cpp\"]if(boolean_expression) {   /* statement(s) will execute if the boolean expression is true */}else {   /* statement(s) will execute if the boolean expression is false */}[/code]Si la expresión boleana se evalúa como cierta, el código dentro del if se ejecutará; de otro modo, el bloque de código else se ejecutará. Ejemplo [code lang=\"cpp\"]#include &lt;stdio.h&gt;int main () {   /* local variable definition */   int a = 100;   /* check the boolean condition */   if( a &lt; 20 ) {      /* if condition is true then print the following */      printf(&quot;a is less than 20\\n&quot; );   }   else {      /* if condition is false then print the following */      printf(&quot;a is not less than 20\\n&quot; ); // se ejecuta   }   printf(&quot;value of a is : %d\\n&quot;, a); // value of a is: 100   return 0;}[/code]Se pueden stackear los \"else if\" para hacer los else que se necesiten. Ejemplo [code lang=\"cpp\"]#include &lt;stdio.h&gt;int main () {   /* local variable definition */   int a = 100;   /* check the boolean condition */   if( a == 10 ) {      /* if condition is true then print the following */      printf(&quot;Value of a is 10\\n&quot; );   }   else if( a == 20 ) {      /* if else if condition is true */      printf(&quot;Value of a is 20\\n&quot; );   }   else if( a == 30 ) {      /* if else if condition is true  */      printf(&quot;Value of a is 30\\n&quot; );   }   else {      /* if none of the conditions is true */      printf(&quot;None of the values is matching\\n&quot; ); // se ejecuta   }   printf(&quot;Exact value of a is: %d\\n&quot;, a ); // Exact value of a is: 100   return 0;}[/code]Sentencia switchVisto el if-else, vamos a ver una sentencia un poco más elegante que un if.. else: switch. Sintaxis de switch [code lang=\"cpp\"]switch(expression) {   case constant-expression1  :      statement(s);      break; /* optional */   case constant-expression2  :      statement(s);      break; /* optional */   /* you can have any number of case statements */   default : /* Optional */   statement(s);}[/code]Aquí tenemos que analizar varias cosas:1º: escoges una variable que tiene un cierto valor2º: vas poniendo casos de cada variable: si la variable vale 1, se va al caso 1; si la variable vale 2, se va al caso 2, etc.3º: si el valor de la variable no está definido por un case, no hará nada excepto que haya un caso default, que corresponde al resto de casos, siendo este default opcional.4º: originalmente cuando ejecutes un caso ejecutará TODOS los case que tenga por debajo excepto el default. Si queremos evitar eso hace falta poner un break; al final de cada case, que indica al programa que queremos terminar el switch al final de ese caso.El diagrama de flujo es bastante poco explicativo en este caso, ya que no explica los break, pero algo es algo: Diagrama de flujo en los switchVamos a ver un ejemplo:[code lang=\"cpp\"]#include &lt;stdio.h&gt;int main () {   /* local variable definition */   char grade = 'B';   switch(grade) {      case 'A' :         printf(&quot;Excellent!\\n&quot; );         break;      case 'B' :      case 'C' :         printf(&quot;Well done\\n&quot; );         break;      case 'D' :         printf(&quot;You passed\\n&quot; );         break;      case 'F' :         printf(&quot;Better try again\\n&quot; );         break;      default :         printf(&quot;Invalid grade\\n&quot; );   }   printf(&quot;Your grade is  %c\\n&quot;, grade );   return 0;}[/code]Este código devolverá \"Well done / Your grade is B\";El operador ?:El operador ?: puede usarse para reemplazar sentencias if... else. Tienen la forma general: Sintaxis de ?: [code lang=\"cpp\"]Exp1 ? Exp2: Exp3;[/code]donde Exp1, Exp2 y Exp3 son expresiones. Notar el uso y la posición del colon o punto y coma (;).Se determina de la siguiente forma:Se evalúa la expresión Exp1. Si es verdad, entonces Exp2 se evalúa y se convierte el valor de la expresión ?.Si Exp1 es falso, entonces Exp3 es evaluado y su valor se convierte en el valor de la expresión.Bucles while y do-whileYa vistas las sentencias de comparación básicas (if...else) vamos a algo relativamente más complicado, pero que agilizará muchas de nuestras tareas de manera masiva: los bucles. Como su misma definición dice, son unas sentencias que se van ejecutando siempre y cuando una condición inicial se cumpla (hasta aquí igual que if... else) pero lo interesante de esto es que mientras la condición inicial no se cumpla, podemos hacer que la ejecución de las sentencias de dentro del bucle se repitan más de una vez, al contrario que en las sentencias básicas! Sintaxis de while [code lang=\"cpp\"]while(condición) {   sentencia(s);}[/code]Como va esto es sencillo: mientras que la condición de entrada no se cumpla, la sentencia se va a ejecutar una y otra vez. Obviamente vemos que es muy sencillo crear un bucle infinito, y seguramente más de una vez os habrá explotado el ordenador porque aunque no consuma memoria per sé, el ordenador se queda haciendo las sentencias indefinidamente lo cual deja la maquina bastante bloqueada. ¿Cómo solucionamos esto? Hay muchas maneras de salir de un bucle, ya las iréis viendo mientras trabajéis más C y veáis ejemplos (que si llegar al final de un array de letras, también llamado string; que si un puntero apunte a NULL, etc) pero la más común es que se unan los bucles con las sentencias antes trabajadas y activemos en el caso de un resultado positivo el flag o la variable que nos permita salir del bucle.Vamos a ver un ejemplo rápido de esto: Ejemplo de flag en bucles [code lang=\"cpp\"]int i = 0;int flag = 0;while(flag == 0) {    i++;    if (i == 5)       flag = 1;}[/code]Vale que es un ejemplo bastante rebuscado (en vez de usar un flag podía hacer directamente while(i&lt;=5)), pero os muestra la esencia del flag: una variable que usamos para decirle al bucle que la condición que queríamos que se cumpliese se ha cumplido. Como veréis en ejemplos posteriores, el flag más usado por lo general suele ser un i; una variable int que va subiendo o bajando su valor gradualmente, dependiendo de como queramos.Entonces, ¿para qué sirven los bucles? Como alguno ya habrá visto, son bastante útiles porque nos sirven para ejecutar un mismo código una cantidad de veces limitada que podemos controlar, ya sea comparando una variable, asignando un flag... Diagrama de flujo en los whileY vamos a ver por fin un ejemplo práctico: imprimir por pantalla los números del 10 al 19. ¿10 printf? ¡No, por favor! No nos pagan por trabajar de más:[code lang=\"cpp\"]#include &lt;stdio.h&gt;int main () {   /* local variable definition */   int a = 10;   /* while loop execution */   while( a &lt; 20 ) {      printf(&quot;value of a: %d\\n&quot;, a);      a++;   }   return 0;}[/code]Como imaginaréis, imprime por pantalla \"value of a: 10\", \"value of a: 11\", y así hasta el 20. ¿Útil, verdad?Vamos a ver una versión un poco más avanzada de esto: Sintaxis de do... while [code lang=\"cpp\"]do {   statement(s);} while( condition );[/code]Ok, ¿qué es esto?. Vamos a ver un momento el diagrama de flujo de este bucle:Diagrama de flujo en los do... whileEs un poco complicado de comprender qué hace o para qué sirve si no lo has usado nunca, pero es muy transparente una vez hacemos una comparación:En el bucle while, primero se comprueba la condición y después se ejecuta el bloque de código. 1º condición, 2º código.En el bucle do.. while, sin embargo, primero se ejecuta el bloque de código y después se comprueba la condición. 1º código, 2º condición.¿Para qué sirve esto, entonces? El mejor ejemplo que se me ocurre ahora mismo es un menú de una aplicación. Imaginad que tenéis una aplicación con varias funciones, pero no te quieres limitar a cada vez que quieras usar una funcionalidad del programa, lo tengas que cargar de nuevo, ¿verdad?Así que lo que puedes hacer es usar do... while haciendo que muestre por pantalla el menú principal (es decir, que vuelva a él una vez haya terminado la funcionalidad, y por lo tanto haya terminado el bucle) mientras el usuario no le dé explicitamente a la opción de salir de la aplicación.Os pongo 2 ejemplos, uno de mi idea y otro más general sobre el do.. while:Ejemplo 1[code lang=\"cpp\"]int opcion;int salir == 0; // Aquí inicializo salir a 0 para asegurar que es algo distinto de 1do {   printf(&quot;Menú principal: Escoja una función 1-3 o salga del programa con 4.\\n&quot;);   scanf(&quot;%d&quot;, &amp;opcion);   switch(opcion) {       case 1 :         función1;         break;       case 2 :         función2;         break;       case 3 :         función3;         break;       case 4 :         printf(&quot;Saliendo del programa...\\n&quot;);         salir = 1;         break;       case default :         printf(&quot;Por favor, introduzca una opción válida.\\n&quot;);} while (break /= 1);[/code]Aquí como véis, mientras el usuario no le de explícitamente a ir al case 4, el programa no saldrá del bucle principal.Ejemplo 2[code lang=\"cpp\"]#include &lt;stdio.h&gt;int main () {   /* local variable definition */   int a = 10;   /* do loop execution */   do {      printf(&quot;value of a: %d\\n&quot;, a);      a = a + 1;   }while( a &lt; 20 );   return 0;}[/code]¡Esto devuelve lo mismo que el ejemplo anterior, con el while! Como podéis ver, se puede usar como si fuera un while, pero obliga a que haya al menos una iteración del bucle (una iteración es cada vez que el bloque de código de dentro del bloque se ejecuta).Bucles forOk, este es EL BUCLE. El más complejo pero sin duda el más potente. Vamos a ver la sintaxis:[code lang=\"cpp\"]for ( init; condition; increment ) {   statement(s);}[/code]Vamos a explicar esto un poco:1º Primero se hará una asignación, que corresponde al init. Aquí se suele usar el valor que va a cambiar durante nuestro bucle, nuestro flag.2º Después se realizará una condición (que no tiene que corresponder con la asignación anterior) y mientras esa condición sea cierta, el bucle se seguirá ejecutando.3º Por último, se realizará una linea de código que se suele llamar incremento, ya que este tipo de bucles se pueden usar para eso.Vamos a ver el diagrama de flujo:Diagrama de flujo en los forEsto se explica casi mejor con un ejemplo:Ejemplo[code lang=\"cpp\"]#include &lt;stdio.h&gt;int main () {   int a;   /* for loop execution */   for( a = 10; a &lt; 20; a = a + 1 ){      printf(&quot;value of a: %d\\n&quot;, a);   }   return 0;}[/code]Y esto devolverá nuestro clásico \"value de a: 10, 11...\"¿Qué vemos aquí? Está claro que en vez de hacer la asignación de la variable fuera, la hacemos dentro del bucle for (a = 10), después asignamos la condición, que te puedes fijar que es la misma que la del while y do.. while (a &lt; 20) y por último hacemos el incremento para poder avanzar por el bucle (a++, a = a+1).Y si es lo mismo que un while, ¿porqué no usamos while? La respuesta es que es más compacto y concentrado, y recuerda que se pueden hacer varias comprobaciones simultáneamente, podemos inicializar varios valores a la vez por lo que permite hacer que pase por muchas funciones de manera muy rápida, aparte de que es más bonito a la vista. Además, hay cosas que son bastante más fáciles de hacer con un for, creéme.FuncionesUna función es un grupo de sentencias que hacen una tarea. Como te puedes haber percatado, todas las funciones de C tienen una función mínima obligatoria, main(), y en esta se ejecutarán el resto de funciones que hagamos fuera del main. Un buen detalle de diseño a la hora de crear una aplicación es ir asignando diferentes funciones a diferentes tareas, así quedando más organizado el código y hacer que se puedan hacer modificaciones o pruebas a una parte concreta de la aplicación sea más sencillo.Hay 2 cosas a tener en cuenta de las funciones:Las declaraciones: se refiere a la primera línea de la función, que dice el tipo de función, lo que devuelve la función (el tipo de return) y sus parámetros.Las definiciones: comentan el \"cuerpo\" de la función, además de incluir la declaración.Como habrás podido intuir, ¡ya hemos usado infinitas funciones durante este artículo! Desde nuestro colega printf(), scanf() o funciones algo más específicas como strcat() o memcpy().En C no hay verdadera distinción entre función, método, sub-rutina o procedimiento, ya que no existen los objetos en C.Sintaxis básicaVimos antes que tenemos declaraciones y funciones, ¿verdad?Vamos a ver primero la definición de una función:Sintaxis[code lang=\"cpp\"]return_type function_name( parameter list ) {   body of the function}[/code]Una definición de una función consiste de una cabecera de la función (header) y el cuerpo de la función (body).Analizemos sus partes:El tipo de return es el tipo de dato que devuelve la función a través de un return. Si no se devuelve nada, usamos el keyword void.El nombre de la función es... su nombre. No hay que ser muy avispao pa darse cuenta -_-Los parámetros son moldes que le explican a la función que le van a llegar unos ciertos datos, con un tipo, orden y número determinado. Se pueden hacer funciones sin parámetros, independientes.El cuerpo de la función es el conjunto de sentencias que definen qué hace la función.Pongamos un ejemplo: la función max() coge dos parámetros num1 y num2 y devuelve con return el mayor de los 2:Ejemplo[code lang=\"cpp\"]/* function returning the max between two numbers */int max(int num1, int num2) {   /* local variable declaration */   int result;   if (num1 &gt; num2)      result = num1;   else      result = num2;   return result;}[/code]Miremos ahora una declaración:[code lang=\"cpp\"]return_type function_name( parameter list );[/code]En el ejemplo de arriba, cualquiera de las 2 siguientes lineas son correctas:[code lang=\"cpp\"]int max(int num1, int num2);int max(int, int);[/code]Esto ocurre porque para la declaración, no le importa cómo se llamen las funciones, solamente le importa saber que le van a llegar 2 variables de tipo int como argumentos.Ahora que hemos visto su estructura, ¿para qué queremos solo las declaraciones? Lo veremos más en conciencia más adelante, pero cuando tenemos una aplicación con varios archivos y queremos usar funciones de un archivo a otro, tenemos que hacer referencia a su cabecera para que sepa con qué tiene que trabajar la función. Esto se utiliza con los ficheros .h, que vienen de header, que indica que son ficheros que contienen las cabeceras del archivo .c asociado con el fin de que se pueda referenciar en otro archivo y entonces el compilador entiende qué le estás pidiendo.Bien, hemos visto lo aburrido de las funciones. Ahora, ¿cómo se usan? Hace falta hacer una llamada a la función para que haga la tarea que queremos. Cuando llamamos a una función, el control del programa pasa a suchodicha función, haciendo una tarea determinada hasta que llega al final de la función o se encuentra un return. Para llamarla explícitamente, solamente es necesario los parámetros necesarios junto con el nombre de la función. Si la función devuelve un valor, puedes hacer una asignación con la función para dar el resultado de la función a una variable de la función padre.Ejemplo[code language=\"cpp\"]#include &lt;stdio.h&gt;/* function declaration */int max(int num1, int num2);int main () {   /* local variable definition */   int a = 100;   int b = 200;   int ret;   /* calling a function to get max value */   ret = max(a, b);   printf( &quot;Max value is : %d\\n&quot;, ret );   return 0;}/* function returning the max between two numbers */int max(int num1, int num2) {   /* local variable declaration */   int result;   if (num1 &gt; num2)      result = num1;   else      result = num2;   return result;}[/code]Como resultado, da \"Max Value: 200\".Argumentos de la funciónSegún cómo le pasemos los argumentos a la función, hay dos tipos de funciones: funciones que hacen una llamada por valor, y una llamada por referencia.La llamada por valor consiste en los tipos de funciones que hemos estado viendo hasta ahora: cogen de una variable el valor asignado a ella y lo utilizan, pero no pueden modificarlo. Para devolver un valor, hace falta devolverlo mediante returns.Ejemplo[code language=\"cpp\"]void swap(int x, int y) { // Esto sería la definición de la función.   int temp;   temp = x; /* save the value of x */   x = y;    /* put y into x */   y = temp; /* put temp into y */   return;}--#include &lt;stdio.h&gt; /* function declaration */void swap(int x, int y); // Suponiendo que swap está en otro archivo, haría falta declararloint main () {   /* local variable definition */   int a = 100;   int b = 200;   printf(&quot;Before swap, value of a : %d\\n&quot;, a );   printf(&quot;Before swap, value of b : %d\\n&quot;, b );   /* calling a function to swap the values */   swap(a, b);   printf(&quot;After swap, value of a : %d\\n&quot;, a );   printf(&quot;After swap, value of b : %d\\n&quot;, b );   return 0;}/*RESULTADOBefore swap, value of a :100Before swap, value of b :200After swap, value of a :100After swap, value of b :200*/[/code]Aquí se ve que aunque los valores a y b se han alterado dentro de la función swap, no se ha alterado en la función principal, ya que pasando a la función los argumentos de esa manera (\"prestando\" los valores, pero no dando la función de verdad) no se puede modificar los valores de la función principal.Es como si la función cuando se le llama de esta forma, \"leyera\" las variables y creara una copia dentro de la función, que se corresponde a los nombres que le damos a los argumentos en la definición de la variable, que aunque se llamen igual son distintas. Por lo tanto, aunque modifiquemos los valores de las variables \"copiadas\" dentro de la función, al ser distintas, no se van a modificar las variables originales que han sido pasadas como argumentos a la función.¿Qué es la llamada por referencia, entonces? Necesitamos punteros, así que si no sabéis de qué estoy hablando, bajad un poco para leeros la zona de punteros y volved aquí un poco más adelante.Ya avisados, ¡continuamos! Aquí en vez de pasarse el valor de la variable como argumento, se pasa la dirección de la variable como argumento (con nuestro amigo el &amp;). Dentro de la función, el argumento se usa para acceder al valor que está en la dirección de memoria proporcionada. Por lo tanto, los cambios que se hagan a los argumentos, al hacerse con la misma variable, se conservarán fuera de la función. Por lo tanto, para pasar un valor como referencia, necesitamos argumentos puntero y llamarlos con la memoria. Recordad: &amp; =&gt; DATO =&gt; *:[code language=\"cpp\"]/* function definition to swap the values */void swap(int *x, int *y) {   int temp;   temp = *x;    /* save the value at address x */   *x = *y;      /* put y into x */   *y = temp;    /* put temp into y */   return;}#include &lt;stdio.h&gt;/* function declaration */void swap(int *x, int *y);int main () {   /* local variable definition */   int a = 100;   int b = 200;   printf(&quot;Before swap, value of a : %d\\n&quot;, a );   printf(&quot;Before swap, value of b : %d\\n&quot;, b );   /* calling a function to swap the values.      * &amp;a indicates pointer to a ie. address of variable a and      * &amp;b indicates pointer to b ie. address of variable b.   */   swap(&amp;a, &amp;b);   printf(&quot;After swap, value of a : %d\\n&quot;, a );   printf(&quot;After swap, value of b : %d\\n&quot;, b );   return 0;}/*RESULTADOBefore swap, value of a :100Before swap, value of b :200After swap, value of a :100After swap, value of b :200*/[/code]Como véis en el ejemplo, siendo más o menos la misma idea de código, usando llamadas memoria y argumentos puntero podemos modificar el valor de una variable de la función padre en una función hija. Esto es fundamental para el desarollo de programas más complejos.Alcance de una función: el scopeEl alcance o scope en cualquier lenguaje de programación es una región del programa donde una variable puede tener existencia y fuera de esa región no puede ser accedida. Hay 3 lugares donde se pueden declarar variables en C:Variables locales: dentro de funciones o bloquesVariables globales: fuera de cualquier funciónVariables formales: declaradas en la definición de funcionesLas variables locales, como hemos dicho antes, se encuentran dentro de bloques y solamente pueden ser usadas por sentencias que están dentro de estos bloques. Las funciones fuera de este bloque no conocen ni siquiera la existencia de esta variable. Ejemplo [code language=\"cpp\"];#include &lt;stdio.h&gt;int main () {  /* local variable declaration */  int a, b;  int c;  /* actual initialization */  a = 10;  b = 20;  c = a + b;  printf (&quot;value of a = %d, b = %d and c = %d\\n&quot;, a, b, c);  return 0;}[/code]Como se puede apreciar en el código de arriba, las variables a,b y c son locales para la función main().Las variables globales se suelen definir fuera de las funciones, al principio del programa. ¿Recordáis cuando os hablé de las macros? Puede parecer lo mismo, pero al contrario de lo primero, las variables globales sí que se modifican durante el tiempo de ejecución del programa, mientras como hemos dicho las macros son siempre constantes. Ejemplo [code lang=\"cpp\"]#include &lt;stdio.h&gt;/* global variable declaration */int g;int main () {  /* local variable declaration */  int a, b;  /* actual initialization */  a = 10;  b = 20;  g = a + b;  printf (&quot;value of a = %d, b = %d and g = %d\\n&quot;, a, b, g);  return 0;}[/code]También podemos combinar variables globales y locales, pero en el caso de tener 2 con el mismo nombre se le dará prioridad a la variable local.Por último tenemos las variables formales, que funcionan como variables locales, y por lo tanto también toman preferencia contra las variables globales. Ejemplo [code lang=\"cpp\"]#include &lt;stdio.h&gt;/* global variable declaration */int a = 20;int main () {  /* local variable declaration in main function */  int a = 10;  int b = 20;  int c = 0;  printf (&quot;value of a in main() = %d\\n&quot;,  a);  c = sum( a, b);  printf (&quot;value of c in main() = %d\\n&quot;,  c);  return 0;}/* function to add two integers */int sum(int a, int b) {   printf (&quot;value of a in sum() = %d\\n&quot;,  a);   printf (&quot;value of b in sum() = %d\\n&quot;,  b);   return a + b;}/*value of a in main() = 10value of a in sum() = 10value of b in sum() = 20value of c in main() = 30*/[/code]Un último detalle, mientras que las variables locales no se inicializan, las variables globales siempre se inicializan automáticamente con FALSE, dependiendo del formato con 0, NULL o '\\0'.Tablas, o arraysUn array es un tipo de estructura de dato que almacena una cierta cantidad de elementos del mismo tipo. Aunque se usa para almacenamiento de datos, es mejor pensarlo como almacenamiento de variables del mismo tipo. En vez de declarar N variables como tabla1, tabla2, declaramos un array llamado tabla y usamos tabla[1], tabla[2], etc para representar las variables indiviudales. Cada elemento del array se accede por un índice (el número dentro del corchete).Algo que será útil más adelante: todos los arrays consisten de direcciones de memoria contiguas, siendo la dirección de memoria más pequeña el primer elemento y la mayor el último.Para declarar un array, la sintaxis es la siguiente: [code lang=\"cpp\"]type arrayNombre [tamañoArray];[/code]Esto es el array básico, o un array unidimensional, siendo tamañoArray un entero mayor que 0 y type cualquier tipo de dato válido en C.  Ejemplo: array de 10 elementos[code lang=\"cpp\"]double balance[10];[/code]Los arrays se inicializan de manera algo distinta:Puedes declarar primero el array e inicializar elemento a elemento (bastante tedioso, seamos honestos)O bien hacer la inicialización junto a la declaración de la siguiente manera: [code lang=\"cpp\"]double balance[5] = {1000.0, 2.0, 3.4, 7.0, 50.0};[/code]Aquí podéis observar algunas cosas:El número de valores entre llaves no puede ser mayor que el número de elementos que declaramos para el array entre corchetes.Puedes omitir el tamaño del array (el 5 en el caso de arriba) si haces la inicialización justo al lado, ya que C es capaz de darse cuenta de que hay 5 elementos y por tanto asignará 5 variables al array almacenando los elementos.Para asignar elemento a elemento es exactamente igual que si fuera una variable independiente, solamente que tenemos que indicar a qué elemento del array nos referimos, y por lo tanto lo tenenemos que referenciar mediante su índice  Ejemplo: asignación de elementos de un array [code lang=\"cpp\"]balance[4] = 50.0;[/code]¡Cuidado aquí! Como puedes haber visto, he puesto el índice 4 pero estoy escribiendo en el quinto elemento del array. Eso es porque en C los índices comienzan con 0 como el 1er índice, así que el 1er elemento será el elemento de índice 0, el 2º elemento el elemento de índice 1, etc. Aparte de esto, existen varias cosas relacionadas con los arrays:Arrays multidimensionales, en el que especificas 2 \"dimensiones\" del array creando una tabla de filas y columnas en el caso de 2 dimensiones y más si pasas a 3 o a N dimensionesPuedes tanto pasar arrays a funciones usando un puntero (soonTM) pasando el nombre del array entero como variable, como devolver arrays en funciones.Por lógica con lo de arriba, también existe por sí mismo un puntero a un array.-- EN CONSTRUCCIÓN --Nada que ver por aquíNada que ver por aquíNada que ver por aquí-- EN CONSTRUCCIÓN --Código ASCIIUn pequeño detalle de C, es que es compatible con el código ASCII, así que puedes imprimir cualquier caracter soportado por este convenio. Aquí se encuentra una tabla de todos los caracteres admitidos en C.  Ejemplo [code language=\"cpp\"]#include &lt;stdio.h&gt;int main() {  printf (&quot;\\u00f1o\\n&quot;); // OUTPUT: año  return 0;}[/code]Como puedes ser, la ñ es \\u00f1 y para poder escribirla es escribirle dentro del mismo printf el código ASCII."
  },
  
  {
    "title": "Acceder sin autenticación a tu servidor - Plex",
    "url": "/2016/10/17/acceder-sin-autenticacion-a-tu-servidor-plex/",
    "categories": "Windows",
    "tags": "",
    "date": "2016-10-17 12:45:56 +0200",
    





    
    "snippet": "Ok, soy un gran fan de la plataforma de Plex. Tengo un servidor 24/7 con mi contenido de tal manera que estoy en Thailandia (no pun intended) o en la universidad, puedo acceder a mi contenido de se...",
    "content": "Ok, soy un gran fan de la plataforma de Plex. Tengo un servidor 24/7 con mi contenido de tal manera que estoy en Thailandia (no pun intended) o en la universidad, puedo acceder a mi contenido de series y películas siempre que quieras. ¿Y si quieres que acceda alguien para compartir rápidamente una serie pero no quieres que se autentique en Plex?DISCLAIMER: Como podréis imaginar, poder acceder sin autenticación significa haber creado varios agujeros de seguridad en el sistema. Si hacéis esto, no tengáis el servidor abierto online siempre o al menos id cambiando los puertos, y nunca dejéis por internet vuestra dirección IP pública, ya que es asquerosamente peligroso!Como sabréis, si quieres compartir tu bibioteca de Plex tienes varias opciones:Las 2 personas tenéis cuenta de Plex y compartís la cuentaLa 2ª persona no tiene cuenta pero accede como usuario gestionado de la 1ª personay etc.Como véis, esto requiere que o los 2 usuarios tengan cuenta o que el 1er usuario comparta su información de login, lo cual no es precisamente cómodo.Pero no os precoupéis, ¡llega Reddit™ para salvar el día de nuevo!Aunque en este artículo (en inglés) se explica más o menos, yo os voy a hacer la explicación completa (al menos para Windows):Tenemos que irnos al registro de Windows (WIN+R, regedit, venga chicos no es tan dificil), irnos al directorio de Plex (Computer\\HKEY_CURRENT_USER\\Software\\Plex, Inc.\\Plex Media Server) y añadir un nuevo valor STRING llamado disableRemoteSecurity y de valor 1.Reiniciamos el servidor, y ¡voliá!, el servidor ahora es accesible desde nuestra dirección pública (en Plex, Ajustes, Servidor) para acceder desde todas partes sin autenticación.- E"
  },
  
  {
    "title": "ModelSIM Student Edition - Instalación",
    "url": "/2016/09/22/modelsim-student-edition-instalacion/",
    "categories": "Circuitos, Instalación",
    "tags": "",
    "date": "2016-09-22 11:47:15 +0200",
    





    
    "snippet": "(Artículo aburrido delante, mind your step)Lo bueno de ser estudiante es que muchas empresas tienen mucho software más barato o directamente gratis para los estudiantes, pero lo engorroso es que co...",
    "content": "(Artículo aburrido delante, mind your step)Lo bueno de ser estudiante es que muchas empresas tienen mucho software más barato o directamente gratis para los estudiantes, pero lo engorroso es que conllevan procesos de registros e instalación muy engorrosos, que para el que no esté acostumbrado le puede dar más de un dolor de cabeza.Hoy traigo la instalación de ModelSIM, un simulador de circuitos electrónicos bastante potente (y que me ha hecho falta en la carrera jeje)Esta vez lo que haré es dejar la presentación de diapositivas justo abajo y después ir explicando diapositiva a diapositiva:[gallery type=\"slideshow\" size=\"full\" ids=\"1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612\"]Buscamos en nuestro buscador favorito (Google en mi caso) ModelSIM Student Edition, encontrando la siguiente página.Dentro de la página, le damos al recuadro azul que pone \"Download Student Edition\"Aceptamos la descargaEsperamos a que termine (va bastante rápido, no como Xilinx)Abrimos el instaladorNos pedirá permisos de administrador (si os sale una ventana, dadle a \"Aceptar\" y empezará el proceso de instalación)NEXTNEXTEsperamos a que termine la instalaciónSugiero que pongáis un icono de ModelSIM en el escritorioAñadir ModelSIM al PATH (si tenéis dudas o no sabéis lo que estáis haciendo, dadle que sí de todas maneras)Le damos a finalizar y comienza el proceso de adquirir la licenciaINTERNET EXPLORER UGHHHHHHHRellenamos los datos del formulario (¡importante el correo de la universidad! para que puedan comprobar que somos estudiantes)Una vez terminado, comprobamos que no ha habido ningún problemaNos vamos al Webmail de la universidad (en mi caso a UAM)Iniciamos sesión (venga, chicos, no puede ser tan complicado)Buscamos el correo que nos acaba de llegar que pone \"ModelSIM Student Edition License\"Conviene recordar la información que pone: la licencia caduca en 180 pero mientras seas estudiante la puedes renovar; y pone información sobre cómo instalar la licencia (pero serán nuestros siguientes pasos no worries)Nos descargamos el \"student_license.dat\"Copiamos, cortamos, lo que os apetezca (de la carpeta de descarga)Nos vamos a la raíz del disco duro (C:\\ en mi caso) y entramos en la nueva carpeta, \"Modeltech_pe_edu_10.4a\" en el momento de escribir el artículo)Pegamos la licenciaComprobamos que se haya pegado bien¡Y voliá! Tenemos a ModelSIM funcionando perfectamente.Recordad simplemente que caducará! Solamente seguid los pasos de la página para volver a repetir el proceso cuando ocurra."
  },
  
  {
    "title": "Javascript 101",
    "url": "/2016/07/27/javascript-101/",
    "categories": "101",
    "tags": "",
    "date": "2016-07-27 20:10:01 +0200",
    





    
    "snippet": "Siguendo la tradición, ¡continuamos con los 101! Tenemos esta vez el 101 de Javascript, donde el curso lo he realizado también de Codecademy (aquí tenéis el enlace).Vamos a organizarlo en unos punt...",
    "content": "Siguendo la tradición, ¡continuamos con los 101! Tenemos esta vez el 101 de Javascript, donde el curso lo he realizado también de Codecademy (aquí tenéis el enlace).Vamos a organizarlo en unos puntos principales: Variables  Tipos de dato Lo que se mantiene de C  Asignaciones 101  Sentencias if-else  Bucles for  Sentencias switch  Bucles while y do-while  Arrays  Funciones  Sintaxis básica  Variables dentro de funciones: scope  Objetos  Sintaxis básica y constructores Porqué todo es un objeto  Funciones y métodos  Prototipos  Bucle for-in  Miscelánea  Variables privadas vs variables públicas  prompt, confirm, isNaN... ¡Y empezamos!Variables[code language=\"javascript\"]var age = 16;[/code]Así de sencillo. Crear una nueva variable es tan sencillo como poner \"var\", seguido del nombre de la variable, un = y el valor de la variable. Hasta aquí todo sencillo, ¿verdad?  Sintaxis [code language=\"javascript\"]NUEVA VARIABLE:var + &quot;nombre de la variable&quot; + = + &quot;valor de la variable&quot; + ;[/code]Si recordamos, en C debido a su estructura más centrada en el uso de la memoria directamente había que especificar que tipo de dato estábamos guardando y cuál tenía que ser su espacio, además que el valor del tipo de dato tenía que tener sentido (es decir, no podías poner un int y poner después un double), que reservaba todo el espacio del tipo de dato en la memoria. Hablaremos más sobre los tipos de dato en el siguiente punto, para ver los que se aplican en Javascript.Aquí no hace falta especificar el tipo de dato con el que estamos trabajando, sino que la declaración de variables se hace implícitamente, ya que el propio lenguaje es capaz de definir de que tipo es el valor del dato que estamos asignando como variable.Además, los que hayáis trabajado C os daréis cuenta de un detalle: vuelven los puntos y coma (;) a definir el separador de línea, por los que ya estéis acostumbrados a escribir en C no os será un gran problema. Hasta donde tengo entendido no es implícitamente necesario hoy en día, pero mejor hacerlo todo según la convención.Tipos de datoEn Javascript se nos presentan unos 5 tipos de dato principales (no son todos, pero son los que trabajaremos en este artículo):number = para números (cualquier tipo de número: natural, entero, real, imaginario...).string = del inglés string, para líneas (de texto).array = una tabla o un array de elementos organizados según un orden concreto.boolean = un booleano, true o false de toda la vida (0 o 1 si sois más masocas).object = un objeto, un elemento único de los lenguajes orientados a objeto como Javascript del que hablaremos más adelante.Estos tipos de dato son los que entiende Javascript internamente, y son con los que trabaja. Vamos a usar un operador conocido de C, nuestro querido typeof (que si no recordáis, devuelve el tipo de dato en función del valor que le pasemos)[code language=\"javascript\"]typeof &quot;John&quot;                // Devuelve &quot;string&quot;typeof 3.14                  // Devuelve &quot;number&quot;typeof false                 // Devuelve &quot;boolean&quot;typeof [1,2,3,4]             // Devuelve &quot;object&quot; (no &quot;array&quot;, mira la nota de abajo)typeof {name:'John', age:34} // Devuelve &quot;object&quot;[/code]El operador typeof devuelve \"objeto\" para un array porque en JavaScript, los arrays técnicamente son objetos.(El ejemplo de arriba está sacado de ésta página de W3Schools)Lo que se mantiene de CUna cosa interesante de haber  sufrido aprendido C es que hay muchas estructuras y operadores que se mantienen en el resto de lenguajes más modernos, al ser uno de los veteranos en el arte de la creación de lenguajes de programación. Así, vamos a ir viendo qué no tenemos que aprendernos de nuevo (o mejor dicho, qué deberíamos recordar):Asignaciones 101¿Alguien recuerda ésta tabla tan bonita (y tan mal diseñada duh) sobre las asignaciones y las comparaciones en C?Bueno, el tema de las asignaciones se mantiene igual. Sigue siendo 1 igual (=) para la asignación de variables. Eso sí, a la hora de ver si 2 valores eran iguales, mientras en C usábamos 2 iguales (==), aquí usaremos 3 (===).  Comparaciones en Javascript [code language=\"javascript\"]&gt; Mayor que&lt; Menor que&lt;= Menor o igual que &gt;= Mayor o igual que=== Igual que!== Distinto que[/code]Como podemos ver, hay algunos elementos a la hora de comparar que cambian, como igual o distinto que.Las comparaciones con varios elementos (conjunciones y disyunciones lógicas, &amp;&amp; y ||) se mantienen igual, y las expresiones sin condición funcionan del mismo modo.Sentencias if-else  Sintaxis [code language=\"javascript\"]if ( variable + comparación (mayor, menor, igual) + variable a comparar) { //\t// el código que se ejecuta si es verdad la condición de arriba}[/code]  Ejemplo: imprimir \"¡Hola!\" [code language=\"javascript\"]var hi = 2;if (hi &lt; 3) { // Comprueba si hi (2) es menor que 3, que es TRUE y el if se cumple\tconsole.log(&quot;¡Hola!&quot;); // Devuelve &quot;¡Hola!&quot;}[/code]Para que entendáis el ejemplo de arriba, console.log(\"valor\") es la manera de escribir en la consola de desarollo en Javascript (un pseudo-equivalente a printf).Bucles for  Sintaxis [code language=\"javascript\"]for (var i = principio; i &lt; fin; i++) { =&gt; hacer algo}[/code]  Ejemplo: imprimir en la consola del 1 al 10 [code language=\"javascript\"]for (var i = 1; i &lt; 11; i = i + 1){\tconsole.log(i);}[/code]Sentencias switch  Sintaxis [code language=\"javascript\"]switch (/*una variable*/) {    case 'option1':        =&gt; Haz una cosa        break;    case 'option2':        =&gt; Haz otra cosa        break;    case 'option3':        =&gt; Haz una tercera cosa        break;    default:        =&gt; Haz algo si la variable no tenía como valor ninguna de las opciones anteriores[/code]  Ejemplo: distingue entre notas [code language=\"javascript\"]var Grade = 'B';switch(Grade){   case 'A' : console.log( &quot;Excellent&quot; );              break;   case 'B' : console.log( &quot;Good&quot; ); // Devuelve &quot;Good&quot; y termina por el break              break;   case 'C' : console.log( &quot;OK&quot; );              break;   case 'D' : console.log( &quot;Mmmmm....&quot; );              break;   case 'F' : console.log( &quot;You must do better than this&quot; );              break;   default  : console.log( &quot;What is your grade anyway?&quot; );              break;}[/code](Ejemplo adaptado de esta página de TutorialsPoint)Bucles while y do-while  Sintaxis [code language=\"javascript\"]// whilewhile(condición){    =&gt; Se aplica el contenido}// do-whiledo {    =&gt; Se aplica el contenido} while (condición)// Recuerda, while (condición) = while (condición = true)[/code]Si recordáis bien, la diferencia principal entre el while y el do-while es que mientras que el while primero comprobaba la condición y si se cumplía, aplicaba el contenido, el do-while primero aplicaba el contenido y antes de repetir el bucle comprobaba la condición, siendo el segundo bastante útil para menús o interfaces de ese estilo.  Ejemplo: while [code language=\"javascript\"]var understand = true;while(understand === true){\tconsole.log(&quot;I'm learning while loops!&quot;);\tunderstand = false;}[/code]  Ejemplo: do-while [code language=\"javascript\"]var loopCondition = false;do {\tconsole.log(&quot;I'm gonna stop looping 'cause my condition is &quot; + loopCondition + &quot;!&quot;);} while (loopCondition);[/code](Ejemplos sacados de \"Introduction to \"While\" Loops in JS\", de Codecademy)ArraysOk, vale, me habéis pillado. Los arrays cambian bastante con respecto a C (no hace falta especificar cuan grande es el array, puede tener cualquier tipo de objeto, se declaran como una variable, pueden tener objetos...) pero oye, la sintaxis es prácticamente la misma, y eso me sirve para justificar que lo puedo decir que es algo heredado de C.  Ejemplo [code language=\"javascript\"]var miArray = [&quot;Hola&quot;, &quot;Mundo&quot;]miArray[0] =&gt; hola// Los strings funcionan como ¡arrays de letras!var miNombre = &quot;Ernesto&quot;;miNombre[0] =&gt; E[/code]Además, como existían en C, aquí también existen los arrays multidimensionales, presentados por filas:[code language=\"javascript\"]var twoDimensional = [[1, 1], [1, 1]];[/code]FuncionesPara aquellos despitados: una función es un elemento que recibe unos argumentos (unas variables) y que suele ejecutar un trozo de código, normalmente dando un valor de respuesta según los argumentos.Sintaxis básica  Sintaxis [code language=\"javascript\"]// 1ª manera (declarándolo como variable) :var nombredelafunción = function (argumento1, argumento2) {    =&gt; código a ejecutar, se pueden usar los argumentos que se han pasado};// 2ª manera (declarándolo como función implícita):function nombredelafunción (argumento1, argumento2) {   =&gt; código a ejecutar, se pueden usar los argumentos que se han pasado};[/code]Nota: ambas maneras de crear una función son válidas y se pueden usar cualquiera de las 2.  Ejemplo: dividir entre 3 [code language=\"javascript\"]var divideByThree = function (number) { // declara la función y le da un nombre    var val = number / 3; // el código entre los corchetes es la función per-sé    console.log(val);};divideByThree(5); // llamada a la función, devuelve 2[/code]Una cosa que se puede apeciar es que a la hora de definir una función, el nombre del argumento puede ser cualquiera: x, argumento1, nombre...Otro aspecto es que como en C, puede devolver un valor para así poder usarse en el calculo de alguna operación como un área, un peso, etc.[code language=\"javascript\"]var divideByThree = function (number) {    var val = number / 3;    return val;};console.log(divideByThree(5)); // sigue devolviendo 2[/code]Variables dentro de funciones: scopeYa hablamos de este concepto en su momento en C 101, pero sigue igual: si declaramos una variable dentro de una función, solamente será accesible dentro de la función, y por lo tanto, no estará disponible para usarse fuera de ésta. Este es un concepto llamado \"variable scope\", o alcance de la variable.  Ejemplo: scope [code language=\"javascript\"]// code here can not use carNamefunction myFunction() {var carName = &quot;Volvo&quot;;// code here can use carName}[/code](Ejemplo sacado de nuevo de W3Schools)ObjetosAquí es donde llegamos a la crema de este lenguaje de progrmaación, los objetos. En los fundamentos de la programación orientada a objeto (o POO), se define prácticamente todo como un objeto, excepto expresiones primitivas, que son:stringsnúmerostrue / falsenullundefinedLo que nos quiere decir esto, que los objetos pueden ser variables dentro de variables: unas variables muy grandes que contienen sub-variables llamadas llaves con un valor. También a las llaves se les puede llamar \"propiedades\".Sintaxis básica y constructoresDebido a la naturaleza flexible del lenguaje de programación, hay varias maneras de definir un objeto.La primera manera es mediante la keyword \"new\": creamos una variable que es un nuevo objeto y definimos sus propiedades.  Ejemplo: \"new\" [code language=\"javascript\"]var person = new Object();// añadir propiedades al objetoperson.firstName = &quot;John&quot;;person.lastName = &quot;Doe&quot;;person.age = 50;person.eyeColor = &quot;blue&quot;;[/code]Fíjate que a cada propiedad se le añade el nombre del objeto (person.age) seguido de un igual y el valor, separado por punto y coma.La segunda manera es mediante la notación literal del objeto como una variable:  Ejemplo: notación literal [code language=\"javascript\"]var person = {    firstName:&quot;John&quot;,    lastName:&quot;Doe&quot;,    age:50,    eyeColor:&quot;blue&quot;};// es lo mismo que la siguiente línea:var person = {firstName:&quot;John&quot;, lastName:&quot;Doe&quot;, age:50, eyeColor:&quot;blue&quot;};[/code]Fíjate que aquí lo puedes poner todo en una sola línea, lo importante es la dualidad propiedad:valor del formato separado por una coma.La tercera manera es usando un constructor, de los cuales son lo siguiente: son funciones que hacen la labor de objetos, y por lo tanto tienen unas propiedades y unos valores.Si definimos mediante los argumentos de la función las propiedades del objeto, podemos crear un nuevo objeto sin necesidad de repetir toda la sintaxis mediante este \"esquemático\" que nos permite hacer Javascript.Una vez hecho el constructor, se usa la keyword \"new\" para definir el tipo de dato nuevo: un objeto creado a partir de un constructor.Además aparece aquí una keyword nueva: el this, que es el objeto al que pertenece el código.W3Schools tiene una explicación bastante buena que traduciré a continuación:El valor de this en una función es el objeto al que pertenece la función.El valor de this en un objeto es el objeto.El keyword this en un constructor de objetos no tiene valor, sino que es un sustituyente del nuevo objeto (equivalente al argumento1, argumento2 cuando creamos funciones)El valor de this será el nuevo objeto cuando el constructor se use para crear un objetoY recuerda, this es una keyword, como new, no una variable, y por lo tanto no puedes cambiar su valor.  Ejemplo: constructor [code language=\"javascript\"]function person(first, last, age, eye) { // Creamos el constructor    this.firstName = first; // Asignamos sus propiedades    this.lastName = last;    this.age = age;    this.eyeColor = eye;}var myFather = new person(&quot;John&quot;, &quot;Doe&quot;, 50, &quot;blue&quot;); // Creamos el objeto nuevovar myMother = new person(&quot;Sally&quot;, &quot;Rally&quot;, 48, &quot;green&quot;);[/code]¿Cómo accedemos a las propiedades del objeto?Pues tenemos 2 maneras, por la notación por punto (\"dot notation\"), o por la notación por corchetes (\"bracket notation\"):[code language=\"javascript\"]ObjectName.PropertyName // dot notationObjectName[&quot;PropertyName&quot;] // bracket notation[/code]¿Podemos hacer que variables nuevas tomen valores de objetos?¡Claro![code language=\"javascript\"]var name1 = bob.name;var age1 = bob.age;[/code]Por qué todo es un objetoVamos a ver un ejemplo bastante curioso encontrado, como de custumbre, en la página de W3Shools.[code language=\"javascript\"]var x1 = new Object();    // A new Object objectvar x2 = new String();    // A new String objectvar x3 = new Number();    // A new Number objectvar x4 = new Boolean()    // A new Boolean objectvar x5 = new Array();     // A new Array objectvar x6 = new RegExp();    // A new RegExp objectvar x7 = new Function();  // A new Function objectvar x8 = new Date();      // A new Date object[/code]Como podemos ver, mediante el uso de un constructor podemos construir incluso expresiones primitivas como String, Number y Boolean.Realmente los valores primitivos (es decir, var número = 3) es mucho mejor, ya que se ejeuta mucho más rápido.Y no hay necesidad de ninguno de los otros elementos:¿Quieres un array?: créalo a base de [].¿Quieres una función?: créalo a base de function () {}.¿Quieres un objeto?: creálo a base de {}.[code language=\"javascript\"]var x1 = {};            // new objectvar x2 = &quot;&quot;;            // new primitive stringvar x3 = 0;             // new primitive numbervar x4 = false;         // new primitive booleanvar x5 = [];            // new array objectvar x6 = function(){};  // new function object[/code]Funciones y métodosYa hemos visto antes cómo podíamos llamar una función:[code language=\"javascript\"]divideByThree(5);[/code]Pero tenemos que ver que aparte de las funciones, en JavaScript existe un nuevo tipo de función: los métodos.Un método es una función que está ligada a un objeto. ¿Recordáis cuando para llamar a strcmp teníamos en C que añadir string.h? C también tiene su propia biblioteca de \"metodos\" o funciones elementales que ayudan a la programación.Entonces, los métodos llegan con el propósito de hacer esta misma función. Sin embargo, al ser funciones ligadas a objetos, cuando hagamos nuestros objetos podemos añadir también unas propiedades que sean funciones, y que se convertirán entonces en métodos del objeto en cuestión.Veamos unos cuantos ejemplos:[code language=\"javascript\"]var square = new Object();square.sideLength = 6;square.calcPerimeter = function() { // ej. de método  return this.sideLength * 4;};square.calcArea = function(){ // ej. de método    return this.sideLength * this.sideLength;}console.log(square.calcPerimeter); // devuelve 24console.log(square.calcArea); // devuelve 36[/code]Podemos ver que la sintaxis es la siguiente:[code language=\"javascript\"]=&gt; creamos un objeto=&gt; una de las propiedades del objeto la definimos como una función=&gt; llamamos al método de la siguiente manera: objeto.metodo(argumentos)[/code]¡Sin quererlo ya hemos visto muchos métodos! Vamos a hablar de los métodos que ya hemos visto antes, y de algunos interesantes:console.log (arg)En efecto chicos, la propia consola de desarollo es un objeto, el cual tiene unos métodos especiales. Uno bastante útil es el log, que permite exportar el argumento (ya sea una variable o el resultado de una función).string.length ()Sirve como os podréis imaginar, para medir la longitud de cualquier string ¡o de cualquier array! (Recordad que los strings son arrays de letras...)Math.random ()Existe un objeto en JavaScript llamado Math (algún veterano que haya usado math.h que levante la mano), y que sirve para realizar calculos varios relacionados con las matemáticas. En este por ejemplo nos encuentra un número real aleatorio entre 0 y 1.  Número entre 0 y 5 sin decimales No me voy a molestar en explicarlo mal, y voy a dejar literal esta buena explicación sacada de codecademy:Math.floor(Math.random() * 5 + 1); First we use Math.random() to create a random number from 0 up to 1. For example, 0.5 Then we multiply by 5 to make the random number from 0 up to 5. For example, 0.5 * 5 = 2.5 Next we use Math.floor() to round down to a whole number. For example, Math.floor( 2.5 ) = 2 Finally we add 1 to change the range from between 0 and 4 to between 1 and 5 (up to and including 5)Math.floor(Math.random() * 2) =&gt; número que es 1 o 0 (= true o false) Math.floor(Math.random() * 5 + 1) =&gt; número que es (1,2,3,4,5)Math.floor (arg)Como podéis haber supuesto antes, quita los decimales del número que pongamos como argumento.array.push (arg)Una función bastante útil en mi opinión, sirve para coger una variable nueva y ponerla al final de un array ya existente. No es necesario especificar un número, JavaScript solito llegará al final de la tabla y pondrá el nuevo elemento ahí.string.toUpperCase (arg) y string.toLowerCase (arg)Como habréis podido adivinar, la primera sirve para poner todo el texto de un string en MAYÚSCULAS y la otra para poner todo en minúsculas.-Hay muchos más, pero nos quedaremos con estos.PrototiposEn Javascript es posible hacer una jerarquía de objetos. Es más, todos los objetos que creamos mediante el constructor de objetos se crean a partir de un objeto llamado Object que tiene todos estos métodos y propiedades predeterminadas. ¿Cómo creamos esta jerarquía entonces? Con los prototipos.El primer ejemplo nos sirve para mostrar cómo aunque no esté incluido en la definición del objeto, podemos añadir un método al objeto \"on the fly\", en el momento, y a partir de ese momento ese objeto y todos los objetos que creeemos de ese tipo tendrán esa propiedad.[code language=\"javascript\"]function Dog (breed) {  this.breed = breed;};// here we make buddy and teach him how to barkvar buddy = new Dog(&quot;golden Retriever&quot;);Dog.prototype.bark = function() {  console.log(&quot;Woof&quot;);};buddy.bark();// here we make snoopyvar snoopy = new Dog(&quot;Beagle&quot;);/// this time it works!snoopy.bark();[/code]El segundo ejemplo nos enseña que podemos usar un constructor ya hecho como prototipo, y el nuevo objeto adquiere todas las propiedades del constructor:[code language=\"javascript\"]Penguin.prototype = new Animal(); // adquiere todas las propiedades de Animal[/code]Bucle for-inHay un nuevo bucle relacionado con los objetos, por eso no lo habíamos visto en C. Se llama bucle for-in, y permite hacer un barrido o un parseo de todas las propiedades de un objeto.Realmente se parece más a un while que a un for: mientras haya propiedades de un objeto, corre el código y vete a la siguiente propiedad.  Sintaxis [code language=\"javascript\"]for (var &quot;propiedad&quot; in &quot;objeto&quot;) {    =&gt; código};[/code]  Ejemplo: imprimir las propiedades de un objeto [code language=\"javascript\"]for (var prop in nyc) {    console.log(prop)};[/code]  Ejemplo: imprimir el valor de las propiedades de un objeto [code language=\"javascript\"]for (var prop in nyc) {    console.log(nyc[prop]);}[/code]MisceláneaAquí hablaré de algunas cosas que no he sabido categorizar en ninguno de los puntos anteriores pero que pueden ser de utilidad.Variables públicas vs variables privadasA la hora de definir un objeto, si hacemos que en vez de this definimos una variable con var, esa variable será privada: es decir, no se podrá acceder desde fuera de la propia función (excepto que se haga alguna otra función para exportarla con un return o algo así).  Ejemplo[code language=\"javascript\"]function Person(first,last,age) {   this.firstname = first;   this.lastname = last;   this.age = age;   var bankBalance = 7500;}// create your Personvar john = new Person (&quot;John&quot;, &quot;Doe&quot;, 54);// try to print his bankBalanceconsole.log(john.bankBalance) // devuelve &quot;undefined&quot;, no sabe el valor.[/code]Con pequeñas modificaciones al código podemos acceder a los valores de las variables privadas:[code language=\"javascript\"]function Person(first,last,age) {   this.firstname = first;   this.lastname = last;   this.age = age;   var bankBalance = 7500;   this.getBalance = function() {      return bankBalance;   };}var john = new Person('John','Smith',30);console.log(john.bankBalance); // devuelve &quot;undefined&quot;// create a new variable myBalance that calls getBalance()var myBalance = john.getBalance();console.log(myBalance); // devuelve &quot;7500&quot;[/code]prompt, confirm, isNaN...Estas funciones de Object son un tanto particulares, y las vamos a definir aquí:prompt (string)Hace que te salga un popout en el navegador que pone el texto que le hayas pasado por argumento y te permite introducir un texto. Prompt enconces devuelve como resultado el texto que hayas escrito.confirm (string)Igual que prompt pero en vez de permitirte introducir un texto solamente te deja poner confirmar o rechazar. Devuelve un boolean true o false, dependiendo del caso.isNaN (object)Le introduces un elemento cualquiera y te dice si su valor es un número o no. Si no es un número, devuelve true, y si lo es devuelve false."
  },
  
  {
    "title": "Custom HTML y Wordpress",
    "url": "/2016/07/08/custom-html-y-wordpress/",
    "categories": "Pro-tips",
    "tags": "",
    "date": "2016-07-08 13:42:22 +0200",
    





    
    "snippet": "¡Hola! Protip rapidillo de viernes por la mañana, de la que termino de perfilar la página de C 101:Si usais la pestaña de HTML en el editor de Wordpress (por cierto, usad WP Admin, no el Dashboard ...",
    "content": "¡Hola! Protip rapidillo de viernes por la mañana, de la que termino de perfilar la página de C 101:Si usais la pestaña de HTML en el editor de Wordpress (por cierto, usad WP Admin, no el Dashboard nuevo por el amor de dios) deberíais tener deshabilitado la opción de autorevisión en tus artículos:Enlace y lo que hay que tener deshabilitadoOs ayudará, creedme. Antes de que os volváis locos porque wordpress decide que vuestro &lt;h3&gt; está mal indentado y te destruye el formato de 2 parrafos. :)E"
  },
  
  {
    "title": "Sacar imágenes de cualquier documento de Office",
    "url": "/2016/03/18/protip-sacar-imagenes-de-cualquier-documento-de-office/",
    "categories": "Pro-tips, Windows",
    "tags": "",
    "date": "2016-03-18 21:22:44 +0100",
    





    
    "snippet": "No sé si lo sabréis, pero cualquier documento de Office es realmente un comprimido de texto, formato, imágenes y archivos.Entonces, si tenéis un archivo de Office (y con Office me refiero a Word o ...",
    "content": "No sé si lo sabréis, pero cualquier documento de Office es realmente un comprimido de texto, formato, imágenes y archivos.Entonces, si tenéis un archivo de Office (y con Office me refiero a Word o PowerPoint) lo que podéis hacer para recuperar las imágenes incrustadas en los archivos es simplemente renombrar el archivo a .doc/docx o .ppt/pptx a .zip. Así, dentro del comprimido encontraremos una carpeta llamada images que contendrá todas las imágenes del documento.¡Hasta otra!- Fuente original "
  },
  
  {
    "title": "Hessiana en Wolfram Alpha",
    "url": "/2016/03/14/protip-hessiana-en-wolfram-alpha/",
    "categories": "Pro-tips",
    "tags": "",
    "date": "2016-03-14 20:08:40 +0100",
    





    
    "snippet": "¡Hola! Como diría el dicho, no estaba muerto, estaba de parranda, así que os traigo nuevos y nutritivos protips para que disfrutéis. En este caso hablamemos de cómo hacer una hessiana en Wolfram Al...",
    "content": "¡Hola! Como diría el dicho, no estaba muerto, estaba de parranda, así que os traigo nuevos y nutritivos protips para que disfrutéis. En este caso hablamemos de cómo hacer una hessiana en Wolfram Alpha, ya que aunque no se puede directamente, podemos hacer una aproximación de lo más poderosa.Aunque WA no puede calcular la hessiana o la jacobiana, ¡sí nos puede calcular el gradiente!Por ejemplo, tenemos la ecuacióny queremos conocer su hessiana. Podemos calcular el primer gradiente, que seráy después calcular los gradientes de cada uno de los lados, tal quequedando la hessianaAunque es verdad que no es una solución total, ya que solamente sirve para 2 variables, es suficiente para prácticar en cualquier asignatura de Cálculo II de cualquier carrera de Ingeniería. ¡Hasta la próxima!"
  },
  
  {
    "title": "Bondades y maravillas de TeXstudio - TeX",
    "url": "/2016/02/17/tex-3-bondades-y-maravillas-de-texstudio/",
    "categories": "TeX",
    "tags": "",
    "date": "2016-02-17 16:00:41 +0100",
    





    
    "snippet": "¡Hola! Hoy te comentaré las bondades y maravillas de TeXstudio, mi herramienta favorita para trabajar con TeX.¡Es gratuito, multiplataforma y está en español! Lo cual viene bastante bien para quien...",
    "content": "¡Hola! Hoy te comentaré las bondades y maravillas de TeXstudio, mi herramienta favorita para trabajar con TeX.¡Es gratuito, multiplataforma y está en español! Lo cual viene bastante bien para quien no sea versado en el inglés, aunque lamentablemente el proceso de compilado, ensamblado y ejecutado del programa sale todo en inglés, incluido los errores, aunque la mayoría son bastante obvias (no se ha activado el modo matemático, falta un corchete, etcetc).¡Te permite usar plantillas! Aunque quizás esto parece una chorrada, cuando tienes una plantilla con unas 50 lineas de código en el estilo de la página, créeme que prefieres tener una plantilla de la que crear un documento nuevo a tener que copiar/pegar el texto de un archivo de texto o algún parecido. Además tiene un control de versiones e incluso gestión de derechos de autor por si eres extremadamente tiquismiquis, pero para la mayoría de usuario lo poco que os he contado da de sobra.¡Te permite usar atajos de teclado! A aquél samaritano que no le convenza TeX por sus complicados controles, tienes los atajos de teclado básicos típicos de cualquier editor de texto se encuentran disponibles más algunos propios de TeX (como el modo matemático).En la barra lateral tiene una lista completa y gráfica de prácticamente cualquier símbolo que puedas necesitar, con:Símbolos de operadoresSímbolos de relaciónSímbolos de flechasDelimitadoresLetras griegasCatácteres cirílicos (éste no he encontrado la manera de hacerlo funcionar)Símbolos matemáticos misceláneosSímbolos de texto misceláneosSímbolos de texto misceláneos con el paquete wassysmLetras con acentoOtrosTiene un downloader automático de módulos en el caso que necesites descargarte algún módulo (por ejemplo, quieres usar geometry para alterar los márgenes de tu documento, te pregunta si quieres descargarte el módulo y te lo instala, lo que te permite no descargarte no descargarte todo TeX entero y solo descargarte los módulos imprescindibles para lo que lo vayas a usar, y después ir ampliando según tus necesidades).Te señala donde hay probables (y prácticamente seguros) errores de compilación, y te indica la línea donde el error está ocurriendo (aunque el 90% de los fallos son por no poner el Math Mode)Tiene plantillas predeterminadas bastante buenas, y son un buen punto de partida para aquel que tenga 0 idea en TeX, aunque yo mismo iré poniendo algunas plantillas o ejemplos para usar.Permite el uso de macros personalizadas que facilitan mucho el estilo de ciertos documentos. ¿Quieres tener todas tus imágenes con un fondo rosa y una descripción en Comic Sans y no te apetece ir una por una? Haz una macro y haz que se active con un comando o incluso un atajo de teclado.Otras muchas opciones que aunque yo no las uso mucho día a día, tú puedas llegar a usar como soporte para bibliografía, marcadores por secciones, o asistentes para crear arrays o insertar imágenes (aunque una vez has pillado la práctica es mejor hacerlo manualmente)"
  },
  
  {
    "title": "¿Cómo se estructura un documento de TeX? - TeX",
    "url": "/2016/02/15/tex-2-como-se-estructura-un-documento-de-tex-y-funcionamiento-basico/",
    "categories": "TeX",
    "tags": "",
    "date": "2016-02-15 18:25:59 +0100",
    





    
    "snippet": "¡Buenas, gente! Hoy hablamos de la estructura básica de un documento de TeX, para comprender algunos conceptos como documentos, tipos, modo matemático...Si nosotros creamos un nuevo documento con T...",
    "content": "¡Buenas, gente! Hoy hablamos de la estructura básica de un documento de TeX, para comprender algunos conceptos como documentos, tipos, modo matemático...Si nosotros creamos un nuevo documento con TeXstudio en forma de artículo, veremos lo siguiente:------------\\documentclass[]{article}%opening\\title{}\\author{}\\begin{document}\\maketitle\\begin{abstract}\\end{abstract}\\section{}\\end{document}--------------La primera parte, por encima del \\begin{document}, indica la cabecera de nuestro documento. Como elemento imprescindible debe estar un \\documentclass[]{}que indica el tipo de documento que vamos a crear, y por lo tanto el estilo básico que va a crear TeX.Aquí tienes una imagen de los distintos tipos de documento fundamentales:[Fuente de la imagen]¡Aparte, hay muchos tipos de documentos distintos! Por ejemplo, el que uso en mis apuntes de Álgebra Lineal es amsart.Además, éste es el lugar para todas las llamadas a estructuras personalizadas (no hablaremos aquí de ello, sino que le daremos más hincapié una vez veamos distintos tipos de plantilla que iré trayendo al blog) y lo más importante, las llamadas a los paquetes.¿Paquetes? ¿En qué consiste eso? Pues es una parte fundamental de TeX: la modulación y expansión de TeX depende en gran medida de todo ello. es simplemente la especificación de un paquete concreto de contenido que TeX se debe descargar con el fin de comprender los símbolos espefificados en la parte central del documento o incluso algunas estructuras que creemos en la cabecera del documento (como por ejemplo, si queremos crear un cuadro con un fondo gris necesitaremos tanto un paquete \"cuadros\" como unas instrucciones para que el programa entienda cómo queremos ese cuadro).¿Cómo se utilizan entonces?Sencillo, solamente hace falta poner\\usepackage{paquete} en la cabecera para hacerlo funcionar.Los paquetes más comunes en TeX son:\\usepackage{amsmath}  → amsmath es la Biblia de prácticamente cualquier documento  en el que se use símbolos matemáticos. Por ejemplo, viene el entorno align para alinear ecuaciones.\\usepackage[margin=0.5in]{geometry} → geometry es muy útil para ajustar los márgenes de página de manera mucho más útil. Aunque el formato de margen de TeX es muy bonito para papers científicos, para tomar apuntes y usarlos como herramientas de trabajo se nos queda un poco incómodo, por lo que nos conviene ajustarlo a nuestras necesidades. En el ejemplo que tengo ahí tengo puesto media pulgada, que es un margen típico de hoja de apuntes.\\usepackage[spanish]{babel} → babel es un paquete que acabo de descubrir de la que escribo este artículo, que se encarga de ponerte en tus textos la ñ y las tildes españolas correctamente. Si escribes en español y no quieres cometer los mismos errores estúpidos que yo (como escribir hojas enteras poniendo tildes con \\' o \\~n), apúntate este. Para hacerlo funcionar hace falta usarlo con \\usepackage[utf8]{inputenc}.Aquí tenéis un enlace con algunos paquetes básicos más, pero como con los tipos de documentos, todo depende de lo que queramos hacer.Además, tenemos como un elemento típico el título, que nos deja poner un título, una fecha (normalmente se pone sola cogiendo la fecha del ordenador, pero podemos especificar qué día o qué queremos que ponga ahí con \\date{}), y un autor.A partir del \\begin{document} es que comienza el documento de verdad, lo que vamos a utilizar a diario para escribir nuestros documentos.Antes de seguir, vamos a hablar tranquilamente de un elemento fundamental de TeX y que no se debe confundir con otro: los entornos o environments.Estos entornos indican a TeX el comienzo o el fin de una parte, de una sección o de algo especial en el documento, y en su forma tan básica forman todo el conjunto del arte del documento en TeX.Como puedes haber supuesto anteriormente tienen la siguiente estructura:\\begin{}[]El begin marca el comienzo del entorno, el texto entre los corchetes especifica qué entorno está comenzando (se denomina parámetro obligatorio) y lo que está entre corchos cuadrados son parámetros opcionales.Además, esta forma de corchetes se conserva en prácticamente todas las estructuras de TeX, incluso en las que no son entornos si no herramientas matemáticas tales como una fracción (que tiene por ejemplo 2 parámetros obligatorios: el denominador y el numerador).Además, hay reglas muy concretas: en todo documento de TeX tiene que haber un \\begin{document} y un \\end{document}, tal y como es necesario un main.c en Simple C, y los elementos que muestran secciones o partes del documento (como \\section{}) no hace falta cerrarlos, por lo que como marca el sentido común, todo lo que tiene un \\begin{} debe tener un \\end{}.Como ya puedes ver en las lineas de más arriba, lo que es un entorno siempre comienza con \\begin{} y termina con \\end{}, mientras que hay otros elementos que simplemente se invocan como por ejemplo el elemento \"negrita\": \\textbf{}.  A estos elementos los podemos llamar simplemente funciones.Ahora vamos a hablar uno de los elementos más fundamentales de todo TeX y sobre el que gira prácticamente toda esta herramienta: el modo matemático.Éste es un modo que se tiene que activar manualmente mediante una llamada, siendo las más comunes $ texto $, \\( texto \\) o \\begin{math} texto \\end{math} en modo en línea (es decir, comprendido dentro de tu texto)  o \\[ texto \\], $$ texto $$, \\begin{displaymath} texto \\begin{displaymath} o \\begin{equation} texto \\end{equation} si quieres el modo independiente, es decir, que aparta el texto y reserva una línea entera para ese texto matemático que estás introduciendo.Esto es fundamental para escribir prácticamente cualquier función que se te ocurra, como \\frac{}{}  → una fracción, \\alpha  →  el símbolo griego alfa, o incluso x^2  → x al cuadrado.¿Puede ser un coñazo quitar y poner mathmode todo el rato? Lo es, en efecto, y puede echar un poco para atrás, pero como enseñaré en un siguiente artículo, no se hace tan duro una vez tenemos los atajos de teclado y podemos agilizar el proceso de escritura (además, si somos inteligentes, podremos usar los modos matemáticos y de texto de tal manera que estén bien separados y sea cómodo tanto para la vista como para la organización del documento).Esto dicho, ¡he terminado lo fundamental de TeX! Si quieres más información, en el apartado de \"New to LaTeX?\" de la documentación de ShareLaTeX enseñan de manera muy sencilla y mejor explicada que yo los elementos básicos de TeX.RecomendadísimoEspero que te haya servido, y ¡nos vemos en el siguiente artículo!"
  },
  
  {
    "title": "Xilinx &lt;/3 Windows 8-10 - Instalación",
    "url": "/2016/02/10/circuitos-1-1-como-hacer-que-xilinx-no-explote-en-windows-8-10/",
    "categories": "Circuitos, Instalación",
    "tags": "",
    "date": "2016-02-10 21:59:27 +0100",
    





    
    "snippet": "¡Hola! Si os habéis fijado, Xilinx tiene la curiosa manía de crashear cada vez que intentas crear un nuevo proyecto en Windows 8-10. Pero ¡no temáis!, Internet (y en este caso un post del foro de e...",
    "content": "¡Hola! Si os habéis fijado, Xilinx tiene la curiosa manía de crashear cada vez que intentas crear un nuevo proyecto en Windows 8-10. Pero ¡no temáis!, Internet (y en este caso un post del foro de esta herramienta infalible) nos soluciona el problema de una manera relativamente sencilla.Aunque sabéis que pongo siempre paso por paso capturas del proceso, básicamente lo que hay que hacer es irse hastaC:\\Xilinx\\14.1\\ISE_DS\\ISE\\lib\\nt64,renombrar libPortability.dll a libPortability.dll.orig, renombrar libPortabilityNOSH.dll a libPortability.dll, copiar este último y pegarlo enC:\\Xilinx\\14.5\\ISE_DS\\common\\lib\\nt64.Aunque sé que todos los que leen estos son extremadamente inteligentes, si os percatáis hay tanto la opción de nt como de nt64. Como dicta vuestro sentido común, si tenéis un sistema de 32 bit. usad nt, si tenéis un sistema de 64 bit usad nt64.¡Fuego apagado!Si os interesa saber porqué crashea, también lo explica en la última linea en el post.Recordatorio: Si no sabes aumentar la imagen al máximo, aquí tienes un pequeño GIF:[gallery ids=\"1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064\" type=\"slideshow\"]"
  },
  
  {
    "title": "Xilinx ISE - Instalación",
    "url": "/2016/02/10/circuitos-1-como-instalar-xilinx-ise-y-no-morir-en-el-intento/",
    "categories": "Circuitos, Instalación, Windows",
    "tags": "",
    "date": "2016-02-10 12:11:04 +0100",
    





    
    "snippet": "Aquí tienes un pequeño artículo acerca de cómo instalar Xilinx, el programa para hacer circuitos, porque hoy en día está extremadamente camuflado y es bastante antintuitivo cómo hacerlo.Además, si ...",
    "content": "Aquí tienes un pequeño artículo acerca de cómo instalar Xilinx, el programa para hacer circuitos, porque hoy en día está extremadamente camuflado y es bastante antintuitivo cómo hacerlo.Además, si usas Mac, déjame darte una mala noticia: No tienen versión para OSX, sólamente para Windows y Linux (en este artículo seguimos en Windows). Pero oye, puedes seguir mi artículo sobre cómo preparar una máquina virtual e intentar instalar Windows por tu cuenta, o puedes esperar unas semanas a que suba un artículo de cómo poner una máquina virtual de Windows en Mac D:Antes de nada, la instalación de Xilinx es tediosa por todos los pasos que te hace hacer, y además son 6 GB, con lo que si no tienes una conexión a Internet decente creo que llegas antes al suicidio a base de beber CocaCola antes de que se termine de descargar.Nota: La contraseña a la hora de crearse una cuenta en Xilinx debe tener 8 caracteres de largo, y como mínimo una letra, un número y un símbolo.Nota 2: Hay que poner el nombre de usuario a la hora de iniciar sesión, no el correo como te pone automático el navegador.Nota 3: Una vez que hayas terminado de configurar el perfil, tienes que volver a intentar descargar Xilinx, entonces te vuelve a pedir el perfil con el detalle de que esta vez en la dirección postal debe ir solo con caracteres alfanuméricos (básicamente números y letras, es decir, sin comas ni símbolos) y además es obligatorio un número de teléfono. Si te da mucho miedo meter tus datos, supongo que puedes inventártelo.Nota 4: La instalación de Xilinx dura bastante y te deja el ordenador bastante tonto. Parece que 16 GB de RAM no son suficientes para no desestabilizar el sistema lmaoooo.Nota 5: Si no sabes aumentar la imagen al máximo, aquí tienes un pequeño GIF:[gallery ids=\"836,842,845,847,849,852,857,860,862,866,868,871,894,912,916,920,924,927,932,935,953,956,960,971,974\" type=\"slideshow\"]Ahora \"sólo\" falta conseguir la licencia de WebPACK:[gallery type=\"slideshow\" size=\"full\" ids=\"1070,1071,1072,1073,1074,1075,1076,1079,1078,1080,1081,1082\"]¡Peligro, peligro! Si tenéis Windows 8 o 10 os fijaréis que NO FUNCIONA. Mirad el siguiente artículo donde arreglo Xilinx para Win 8-10.Con todo esto, debería funcionar.¡Disfruta! (si te ha servido, claro)"
  },
  
  {
    "title": "TeX 101",
    "url": "/2016/02/09/tex-1-en-que-consiste-tex/",
    "categories": "101, TeX",
    "tags": "",
    "date": "2016-02-09 13:00:27 +0100",
    





    
    "snippet": "Vale, suponiendo que tienes listo una distribución de TeX con un editor, ¿ya te puedo contar de qué va todo esto? Sencillo: TeX es una herramienta que permite a base de texto puro, hacer prácticame...",
    "content": "Vale, suponiendo que tienes listo una distribución de TeX con un editor, ¿ya te puedo contar de qué va todo esto? Sencillo: TeX es una herramienta que permite a base de texto puro, hacer prácticamente cualquier símbolo matemático existente una figura, matriz, ¡e incluso puede representar imágenes dentro del propio documento!Básicamente funciona de la siguiente manera:Nosotros escribimos en un fichero de texto, que se le suele dar una terminación de archivo .tex. Aquí ponemos todo el contenido de nuestro texto: toda la estructura y el diseño de nuestra página.Entonces, el programa se encargará de compilar todos los módulos que le hemos ido pidiendo en el fichero tex y los exportará a un .pdf, lo cual permite una lectura bastante agradable.Hablemos un poco más a fondo de las características de TeX:Es muy poderoso: podemos escribir cualquier tipo de cosa en él con cualquier fórmula. Tiene unas reglas propias (como cualquier lenguaje de tipografía que se precie), pero te permite una representación de figuras complicadas de escribir de otra manera (Word, PowerPoint, Matlab, etcetc) de manera eficaz.Por ejemplo, si queremos escribir algo tan rimbombante como lo de arriba, simplementehay que escribir$ A_f = \\frac{e^{\\infty}}{\\sqrt{-n_3}} $Parece complicado, ¿verdad? Realmente la sintaxis es muy simple, dividida entre funciones como \"\\frac{num}{den}\" donde frac indica el tipo de función (en este caso, indica una fracción) y num y den son los 2 argumentos que pide la función (que son obviamente el numerador y el denominador.)Para que veáis un ápice de potencia, podéis crear cosas tan chulas como éstas:Es muy rápido: Es una verdad como un templo: escibir sólamente con el teclado es sencillamente más eficiente que con teclado y ratón. No tienes que ocupar una mano en hacer otras acciones, y aunque en otras herramientas también podemos hacer uso de los queridos atajos de teclado, cualquier editor normal de TeX también tiene atajos de teclado (por ejemplo, la negrita (CTRL+B) sería \\textbf{la negrita} y la itálica (CTRL+I) sería \\textit{la it\\'alica})Si le he podido encontrar alguna pega a TeX, es su dificultad en el español: Todas las tildes (de todos los tipos), las tienes que indicar de forma especial para no confundirse con un comando. Por ejemplo, la ñ se escribe como \\~n, lo cual es cuanto menos molesto. EDIT: NOT ANYMORE Y lo mejor, es modulable: como todos sabemos, las grandes cosas en la tecnología siempre son modulables y expandibles (hola iPhone, hola Minecraft), y por supuesto TeX no iba a ser menos. Una de las ventajas de TeXstudio es que te permite descargarte cualquier módulo distinto de lo habitual que hayas decidido entrar, y como es obvio, puedes reescribir tú mismo todas las estructuras de tu fichero incluyendo estilo de letra, fuente, posicionamiento, márgenes o símbolos prácticamente customizados. ¿Que te apetece a los capítulos llamarlos chorizos e invocarlos con un \\begin{chorizo}? ¡Adelante! Tienes todo a tu disposición.Aquí es donde viene la pregunta del millón: ¿y dónde aprendo yo TeX? Como la mayoría de los casos, Internet tiene la respuesta. Aparte de infinitas guías para aprender los conceptos básicos de TeX mucho más amplias de lo que yo pueda aprender a contar, que soy un simple usuario, así que os recomiendo como biblia \"A Gentle Introduction into TeX\", de Miachel Doob, como punto de referencia. ¿Qué no tenéis mucho tiempo, os resulta muy complicado o simplemente no os convence el lenguaje anglosajón? No pasa nada, también tenéis la página de Nokoyotsu - LaTeX fácil, donde os explica de una manera muy intuitiva y sencilla a dar vuestros primeros pasos en TeX. Además, siempre está la documentación de ShareLaTeX, muy básica pero genial para autoaprendizaje.¿Y una vez que he ido aprendiendo? Mi mejor baza es que consultéis dudas puntuales también por Internet. No sabéis cuantas dudas he podido resolver a base de buscar en Google. Para daros un ejemplo práctico, quería una caja negra para usar en las definiciones de mis apuntes, tal que así:y no lo conseguía hacer de ninguna manera. Entonces buscando, llegué a una página de StackOverflow (una especie de Yahoo Respuestas inglés centrado en el mundo de la programación INCREÍBLE, no sabéis la cantidad de dudas sobre cualquier cosa tecnológica os pueden resolver ahí) donde un amable señor creó una estructura llamada graybox que se especificaba al comienzo del documento y compiló de maravilla!Bueno, después de este artículo tan teórico y técnico o también un poco motivador para que os animéis a usar TeX (si os dedicáis/dedicaréis al ámbito académico será probablemente vuestro pan de cada día, así que mientras antes lo apendáis antes podréis dominarlo y escribir documentos elegantes con soltura).Además, tomar apuntes en TeX es completamente poser. Tomar matrices de ecuaciones parciales a mano es tan 2015...Bueno, ¡espero que te haya servido el artículo! Si todo va bien, probablemente el siguiente sea explicando las maravillas y bondades de TeXstudio.&nbsp;&nbsp;"
  },
  
  {
    "title": "Terminal 101",
    "url": "/2016/02/07/ubuntu-3-linea-de-comandos-101/",
    "categories": "101, Pro-tips",
    "tags": "",
    "date": "2016-02-07 16:24:00 +0100",
    





    
    "snippet": "¡Hola! Acabo de terminar el curso de la linea de comandos (command line) de Codecademy, el cual es gratuito y corto por lo que es muy recomendado que lo hagas! Te dejo el enlace por aquí.Entonces, ...",
    "content": "¡Hola! Acabo de terminar el curso de la linea de comandos (command line) de Codecademy, el cual es gratuito y corto por lo que es muy recomendado que lo hagas! Te dejo el enlace por aquí.Entonces, de la que estaba haciendo el curso tomé apunte de todos los comandos que se usan en el curso y me pareció apropiado dejarlos colgados aquí para una revisión posterior. ¡Algunos comandos pueden llegar a resultar extremadamente útiles! Si tienes alguna duda con alguno, antes de preguntarme, te recomiendo que te hagas el curso de Codecademy. Seguramente te lo terminas antes de que puedas ver una película entera del Señor de los Anillos de todas maneras D:NAVEGACIÓNls \"lists\" =&gt; lista de archivos en el directorio donde estáspwd =&gt; \"print working directory\" - pone el nombre del directorio en el que te encuentras (se llama directorio activo, working directory).cd =&gt; \"change directory\" - te cambia al directoriocd 2015 =&gt; \"2015\" es un argumentocd - =&gt; vuelve al anteriorcd .. =&gt; vuelve al directorio padrecd ../../action/ =&gt; moverse 2 directorios hacia atrás, y entonces entrar en action/mkdir =&gt; \"make directory\" - crear una nueva carpetatouch keyboard.txt =&gt; crea un archivo llamado keyboard.txt en el directorio activoMANIPULACIÓNListar - ls-a =&gt; muestra todo el contenido, incluyendo archivos ocultos y directorios-l =&gt; muestra todo el contenido del directorio en un formato largo-t =&gt; ordena los archivos y los directorios según su última modificación.Cuando hacemos ls -l aparece algo como esto:drwxr-xr-x 5 cc eng 4096Jun 24 16:51 actiondrwxr-xr-x -&gt; derechos de acceso5 -&gt; número de vínculos físicos (el número de directorios hijos y archivos, incluyéndose a si mismo.)cc -&gt; el propietario del archivoeng -&gt; el grupo al que le pertenece el archivo.4096 -&gt; el tamaño del archivo en bytes.Jun 24 16:51 -&gt; fecha y hora de su última modificaciónaction -&gt; nombre del archivo/directorio¡las puedes mezclar! =&gt; ls -alt, ls -al, ls -lt, etc&nbsp;Copiar - cp1) coge un archivo lleno + uno vacío =&gt; copia los contenidos de uno en otro2) coge un archivo + un directorio =&gt; copia el archivo al directorio3) coge un conjunto de archivos + un directorio =&gt; copia todos al directorioaparte de usar argumentos, podemos usar caracteres como * para seleccionar grupos de archivos. Estos se llaman comodines. por ejemplo:cp * satire/ =&gt; copia todos los archivos en el directorio activo a satire/cp m*.txt scifi/ =&gt; copia todos los archivos que empiezen por m y terminen en .txt y los copia en scifi/Mover - mvmv superman.txt superhero/ =&gt; \"move\" - mueve un archivo/ un conjunto de archivos a un directorio o renombrar un archivo a otro.Remover - rmrm waterboy.txt =&gt; \"remove\" - eleminar un archivo de un directorio.argumentos de remove:-r =&gt; recursivo: elimina un directorio y lo que tenga dentro.REDIRECCIÓNecho \"Hello\" =&gt; acepta hello como entrada y devuelve hello como salidaStandard input -&gt; \"stdin\" es la información recibida por el teclado o dispositivo de entradaStandard Output -&gt; \"stdout\" es la información que exporta después de que se ejecuta un programaStandard Error -&gt; \"stderr\" es un mensaje de error cuando falla un proceso.La redirección redirige stdin, stdout o stderr desde o hacia una localización diferente.echo \"Hello\" &gt; hello.txt =&gt; ejecuta el programa y pon su output en un archivo llamado hello.txtcat hello.txt =&gt; abre un archivo y leelo en la consola&gt; =&gt; redirige stdout a un archivocat redirige el archivo al terminal&gt; =&gt; puedes usarlo para poner los contenidos de un archivo A en uno B, y sobreescribe.&gt;&gt; =&gt; añade los contenidos de un archivo a otro.&lt;  =&gt; coge el stdin del archivo de la derecha y lo pone en la izquierda.|  =&gt; es una tubería: coge el stdout del comando de la derecha y lo conduce como stdin en el comando de la izquierda, siendo una \"Rediección comando a comando\". Pueden ser encadenar varios a la vez.sort =&gt; coge el stdin y lo ordena alfabéticamente para el stdout.uniq =&gt; elimina columnas duplicadas, pero sólo en las lineas adyacientes, por lo que vale la pena hacer un sort primero y después un uniq para eliminar todos los duplicados.grep =&gt; \"global regular expression point\" - busca por lineas que concuerdan a un patrón y devuelve los resultados.por ejemplo, en grep Mount busca \"Mount\".-i hace que no separe entre mayúsculas y minúsculas.también sirve para buscar dentro de un directorio.-R =&gt; recursive-l =&gt; files with matchesgrep -r  &gt; Artic =&gt; busca en todos los archivos en un directorio y busca dentro de estos archivos la linea introducida.grep -Rl Artic =&gt; enseña solo los archivos en los que se ha encontrado la palabra.sed =&gt; \"stream editor\" acepta stdin y lo modifica basándose en una expresión antes de hacer stdout.Es similar a busca y replaza.sed 's/snow/rain' hi.txts -&gt; sustitucion (para usar sed para sustituir)snow -&gt; el texto a buscarrain -&gt; el texto de replazoENTORNOnano hello.txt =&gt; editor de texto en el terminalclear =&gt; limpiar lo que hay en pantallael cono pa'rriba es el CTRLCTRL+O - guarda un archivo \"output\"CTRL+X - sale \"exit\"CTRL-G - ayudaBash (bourse again shell) - programa informático cuya función consiste en interpretar órdenes.~/.bash_profile -&gt; archivo usado para guardar ajustes de entorno.~ -&gt; directorio home. -&gt; archivo ocultosource ~/.bash_profile =&gt; hace que los cambios a bash_profile se activen inmediatamente.alias pd=\"pwd\" =&gt; te deja crear atajos de teclado para comandos comunes.Variables de entorno history =&gt; historial de tus acciones en la linea de comandosexport USER=\"Jane Doe\" =&gt; USER se convierte en una variable de entorno, y si se le invoca con $USER sale el valor asignado.PS1 =&gt; la variable que define el estilo de la consola de comandos.HOME = donde se encuentra homePATH = es una lista cuyos directorios contienen sciptstal que pwd es realmente /bin/pwd y ls =&gt; /bin/lsenv =&gt; environment - devuelve una lista de variables de entorno al usuario, como PATH, PWD, PS1 y HOME.PD: el | se buggea en la consola de comandos de Codecademy, si tienes que escribirlo usa Alt+124"
  },
  
  {
    "title": "CTRL+ALT y ALT GR en Windows",
    "url": "/2016/02/04/protip-ctrlalt-y-alt-gr/",
    "categories": "Pro-tips, Windows",
    "tags": "",
    "date": "2016-02-04 16:11:12 +0100",
    





    
    "snippet": "Acabo de descubrir algo prodigioso. Después de escribir en un ordenador básicamente los últimos 10 años de mi vida, hoy he descubierto que en el teclado español en Windows, CTRL + ALT y ALT GR hace...",
    "content": "Acabo de descubrir algo prodigioso. Después de escribir en un ordenador básicamente los últimos 10 años de mi vida, hoy he descubierto que en el teclado español en Windows, CTRL + ALT y ALT GR hacen... lo mismo.¡Compruébalo!Intenta CTRL + ALT + 5 =&gt; €Y si hacés ALT GR + 5 =&gt; €Además, si os fijais, los símbolos del centro/debajo de vuestras teclas son los que conseguís con Shift y los de la derecha con Alt Gr / Ctrl + Alt.La vida es maravillosa.PD2: Al parecer, ni en Linux ni OSX [Mac] funciona :("
  },
  
  {
    "title": "TeX &lt;3 Windows - Instalación",
    "url": "/2016/02/04/tex-0-como-instalar-tex-en-windows/",
    "categories": "Instalación, TeX, Windows",
    "tags": "",
    "date": "2016-02-04 13:00:04 +0100",
    





    
    "snippet": "¡Buenas! Hoy te enseño como instalar TeX, un sistema de tipografía muy útil y muy extendido para escribir textos matemáticos.Se usa para la mayoría de textos científicos y para la escritura de fórm...",
    "content": "¡Buenas! Hoy te enseño como instalar TeX, un sistema de tipografía muy útil y muy extendido para escribir textos matemáticos.Se usa para la mayoría de textos científicos y para la escritura de fórmulas matemáticas complejas gracias a su rica y poderosa sintaxis ampliable además con módulos.Como es un sistema tan extendido, hay varias distribuciones, siendo la más popular y extendida para Windows MikTeX, que es la que instalo en este artículo junto con TeXstudio, un editor de TeX muy poderoso y muy práctico para aprender a manejar el lenguaje.Nota: obviar que todas estas aplicaciones son no solo gratuitas, sino además de código abierto.Instalando MiKTeXHay que ir a la página oficial de MikTeX y descargar el instalador (que ocupa unos 180 MB) e instalar las opciones predeterminadas:¡Peligro, peligro! En las imágenes pongo que se puede descargar tanto la versión de 32 bits o de 64, obra según tu sistema operativo.[gallery type=\"slideshow\" link=\"file\" ids=\"531,533,536,538,540,543,545,549,552\"]Instalando TeXstudioDespués de que esté terminado la instalación, procedo a instalar TeXstudio:Nota: Aunque la forma de instalar TeX en sí cambia según el sistema operativo (por ejemplo, en Mac se instala MacTeX, no MiKTeX), TeXstudio es igual para todos los sistemas operativos, ya que es un programa multiplataforma.Nota 2: TeXstudio no te deja elegir entre 32 y 64-bit, simplemente pulsa al instalador y él se encargará de elegir el adecuado.[gallery type=\"slideshow\" ids=\"554,556,566,577,580,583,586,588,591,593,602,604,607,613,616,619,621\"]&nbsp;¿Cómo lo compruebo? Hacer un artículo con plantilla y ejecutar (ya hablaremos más a fondo en qué consiste todo en mi siguiente artículo)Si te ha salido así, ¡felicidades!, tienes TeX listo y configurado para usar. En el siguiente artículo trabajo un poco cómo usar TeXstudio y cuáles son los comandos básicos para comenzar a escribir en TeX.&nbsp;"
  },
  
  {
    "title": "Hotkey de Terminal en Ubuntu",
    "url": "/2016/02/03/protip-como-sacar-la-consola-de-comandos-terminal-en-linux-ubuntu/",
    "categories": "Pro-tips, Ubuntu / Linux",
    "tags": "",
    "date": "2016-02-03 20:36:24 +0100",
    





    
    "snippet": "¡Vale, parece una tontería pero es que me lo acaban de preguntar!2 opciones:Buscar en el buscador \"Terminal\"CTRL+ALT+T¡Tachán!",
    "content": "¡Vale, parece una tontería pero es que me lo acaban de preguntar!2 opciones:Buscar en el buscador \"Terminal\"CTRL+ALT+T¡Tachán!"
  },
  
  {
    "title": "Valgrind - Instalación",
    "url": "/2016/02/01/ubuntu-3-como-instalar-valgrind/",
    "categories": "Instalación, Pro-tips, Ubuntu / Linux",
    "tags": "",
    "date": "2016-02-01 19:24:13 +0100",
    





    
    "snippet": "Valgrind! ¿Cómo se instala? Fácil y sencillo, apt-get siempre tiene la solución a todo.Una sencilla línea en el Terminal,sudo apt-get install valgrindCorto pero intenso, verdad?",
    "content": "Valgrind! ¿Cómo se instala? Fácil y sencillo, apt-get siempre tiene la solución a todo.Una sencilla línea en el Terminal,sudo apt-get install valgrindCorto pero intenso, verdad?"
  },
  
  {
    "title": "¿Cómo sacar la posición del elemento mayor y menor de un array de números en C?",
    "url": "/2016/01/31/protip-como-sacar-la-posicion-del-elemento-mayor-y-menor-de-un-array-de-numeros-en-c/",
    "categories": "Pro-tips",
    "tags": "",
    "date": "2016-01-31 21:29:55 +0100",
    





    
    "snippet": "Hoy de la que tal me ha salido esto, y os puede ser útil.Un ejemplo de ejecución:El mayor es 2El menor es 0Nota: fijaos que el número de elementos es una variable global, por lo que se puede usar p...",
    "content": "Hoy de la que tal me ha salido esto, y os puede ser útil.Un ejemplo de ejecución:El mayor es 2El menor es 0Nota: fijaos que el número de elementos es una variable global, por lo que se puede usar para cualquier número de elementos dentro del mismo array."
  },
  
  {
    "title": "Abrir un Terminal en cualquier carpeta de Ubuntu",
    "url": "/2016/01/31/protip-abrir-en-cualquier-carpeta-un-terminal/",
    "categories": "Pro-tips, Ubuntu / Linux",
    "tags": "",
    "date": "2016-01-31 17:55:19 +0100",
    





    
    "snippet": "Todo el mundo es vago, y aunque sabemos movernos por carpetas con Terminal a base de infinitos cd, ¿no molaría pinchar en la carpeta y que nos abriera directamente un terminal ubicado en ese lugar?...",
    "content": "Todo el mundo es vago, y aunque sabemos movernos por carpetas con Terminal a base de infinitos cd, ¿no molaría pinchar en la carpeta y que nos abriera directamente un terminal ubicado en ese lugar?No os preocupéís, vuestra solución ha llegado!Antes os encontraríais cada vez que hagáis click derecho en una carpeta algo así:Pero es sencillo arreglar ésto: abrimos un terminal, escribimossudo apt-get install nautilus-open-terminal(Si tenéis curiosidad, al explorador de archivos se le llama Nautilus en Ubuntu)escribimos nuestra contraseña para darle permisos sudo, hacemosnautilus -q para reiniciar el explorador, y voliá!Os crea una ventana del Terminal ubicada en la carpeta que habéis hecho click derecho. Sencillo, verdad?&nbsp;"
  },
  
  {
    "title": "Netbeans en Ubuntu - Instalación",
    "url": "/2016/01/31/video-ubuntu-2-como-instalar-netbeans-en-linux-ubuntu/",
    "categories": "Instalación, Ubuntu / Linux",
    "tags": "",
    "date": "2016-01-31 13:00:52 +0100",
    





    
    "snippet": "https://youtu.be/2B7B0JVXdNgTL:DR del video:Para instalar el JDK (entorno de desarollo de Java, necesario para ejecutar Netbeans), solo es necesario irse al centro de Software de Ubuntu, buscar Jav...",
    "content": "https://youtu.be/2B7B0JVXdNgTL:DR del video:Para instalar el JDK (entorno de desarollo de Java, necesario para ejecutar Netbeans), solo es necesario irse al centro de Software de Ubuntu, buscar Java y descargar OpenJDK 7.Para descargar Netbeans solo es necesario descargarse el archivo correspondiente a Linux en su página web oficial.Para instalar Netbeans tenemos que primero darle permisos de ejecución al instalador con el siguiente comando:chmod +x netbeans-8.0.2-cpp-linux.shy después ejecutar el instalador de ésta manera:./netbeans-8.0.2-cpp-linux.shRecordad que el tabulador (la tecla encima del Bloq. Mayús.) sirve para autocompletar. EJEMPLO DE AUTOCOMPLETAR EN EL TERMINALEstáis en el terminal dentro de la carpeta Descargas y os sale esto lsa ab abc aabcPor lo que hay 3 archivos. En el supuesto caso en que los 3 fueran ejecutables, y por ejemplo quisiéramos ejecutar abc, haríamos./ale daríamos al tablulador y nos enseñaríaa ab abccomo las opciones posibles. Por ejemplo poniendo./aby tabulando nos enseñaríaab abcya que ahora a no está incluido, y si pusiéramos./aanos escribiría directamente./aabcya que es la única posibilidad.&nbsp;"
  },
  
  {
    "title": "Guest Additions y carpetas compartidas - Instalación",
    "url": "/2016/01/29/video-como-instalar-las-guest-additions-y-configurar-carpetas-compartidas/",
    "categories": "Instalación, Ubuntu / Linux",
    "tags": "",
    "date": "2016-01-29 16:01:10 +0100",
    





    
    "snippet": "https://youtu.be/ihs4UEVNFwATL:DR del video:Para instalar las Guest Additions, arranca la máquina virtual y Dispositivos - Insertar CD de las Guest Additions, seguir proceso de instalación.Para pon...",
    "content": "https://youtu.be/ihs4UEVNFwATL:DR del video:Para instalar las Guest Additions, arranca la máquina virtual y Dispositivos - Insertar CD de las Guest Additions, seguir proceso de instalación.Para poner una carpeta compartida, vete a Dispositivos - Carpeta compartida, a Nuevo - Carpeta, checkear auto-montar, hacer permanente, reiniciar el ordenador, comprobar que tenemos permisos para acceder a la carpeta compartida.Si te dice que no tienes permisos, ejecuta el siguiente comando en la consola de comandossudo adduser &lt;username&gt; vboxsfy reinicia Ubuntu para tener tu carpeta.Para quitar la carpeta compartida, desmontar la carpeta en Ubuntu tal quesudo umount /media/sf_Dropboxquitar la carpeta compartida en VirtualBox haciendo el proceso contrario y eliminar la carpeta de Ubuntu comosudo rm -r /media/sf_Dropboxy reiniciar.Próximamente: ¡Instalar Netbeans!"
  },
  
  {
    "title": "VirtualBox + Ubuntu &lt;3 Windows - Instalación",
    "url": "/2016/01/29/como-preparar-una-maquina-virtual-en-windows/",
    "categories": "Instalación, Ubuntu / Linux, Windows",
    "tags": "",
    "date": "2016-01-29 16:00:06 +0100",
    





    
    "snippet": "Buenas gente. Con tanto lío en Programación para usar Linux y la gente huyendo en pánico ante su desconocimiento a instalar una máquina virtual, vamos a hacer un sencillo y nutritivo paso por paso ...",
    "content": "Buenas gente. Con tanto lío en Programación para usar Linux y la gente huyendo en pánico ante su desconocimiento a instalar una máquina virtual, vamos a hacer un sencillo y nutritivo paso por paso para instalar la máquina virtual que necesitemos en Windows (da igual XP, Vista, 7, 8, 10 o 27).¡Peligro, peligro! El almacenamiento de memoria no es un problema excesivamente grande (como veremos después) pero sí es necesario tener un ordenador relativamente decente (pongamos que un Core 2 Duo y 4GB de RAM es lo justo y necesario para que funcione la máquina virtual con fluidez)En este caso vamos a usar Ubuntu, una de las más comunes distribuciones (versiones) de Linux, y VirtualBox, el programa de máquinas virtuales por excelencia.Primero lo que necesitaremos será ir a la página de VirtualBox, y descargar la versión que nos corresponde, la cual está marcada en amarillo abajo:[gallery type=\"slideshow\" ids=\"225,229\"]Nota: Como veis, también se puede descargar tanto para OSX (Mac) como para Linux mismo. El resto de pasos a continuación para otros sistemas operativos cambia poco o nada (si acaso la instalación de VirtualBox per sé), pero la preparación de la máquina virtual es idéntica.Una vez descargado procedemos a instalarlo:Nota: Si las imágenes son muy pequeñas, meted zoom con el navegador, las imágenes se redimensionarán a algo más legible.[gallery columns=\"1\" type=\"slideshow\" ids=\"235,237,239,241,245,250,255\"](Como podéis comprobar, es seguir la milenaria técnica de siguiente todo el rato)Ahora nos necesitamos descargar Ubuntu.Ubuntu per sé tiene varias opciones y varios formatos (para servidor, para la nube, etcetc), pero el que nos interesa a nosotros es el Desktop (para usuarios normales).Además, os recomiendo que os descarguéis la 14.04.3 LTS (es la más estable por el momento y la que tiene más años de actualizaciones, la 15.10 que es la más nueva en este momento no tiene tanto soporte) en su página oficial.Nota: Ya que os pedí un ordenador medianamente decente, supongo que podréis conseguir usar la versión en 64 bits. En una máquina virtual no se nota mucho, pero para resumir en 32 bits puedes usar hasta aprox. 4 GB de RAM y con 64 hasta lo que quieras, así que mejor descargar la de 64.Nota 2: Cuando  te pone para hacer una donación, ES OPCIONAL, simplemente dadle abajo a \"Not now, take me to the download\"[gallery type=\"slideshow\" ids=\"269,273,276,279,283\"]El archivo suele ocupar un GB y pico y suele ir bastante rápido con una conexión a internet aceptable.EDIT: Ubuntu se ha ido actualizando y muchos me pedís la versión de Ubuntu del tutorial, por aquí os la dejo para que os la descarguéis por descarga directa desde un mirror español.Ahora nos toca preparar la máquina virtual per sé:Abrimos VirtualBox y la configuramos según las siguientes imágenes:Nota: a la hora de asignar memoria os recomendaría que tuviera alrededor de 1,5 - 2 GB de memoria, aunque si vais sobraos (como mi caso) podéis dar incluso 4 GB, aunque puede dejar a la máquina un poco lenta.Nota 2: Al crear el disco duro virtual, si no vais a usarlo para mucho más que para programar (donde básicamente los archivos de programación estarán en tu Dropbox normal de Windows o en otra carpeta del ordenador), con 20 GB vais correctos de espacio. ¿Que estáis muy mal de espacio? Dadle el predeterminado (8 GB).¡Peligro, peligro! Me han hablado de un caso donde sólo aparecen las opciones de 32 bits a la hora de escoger sistema operativo. Eso es seguramente porque tenéis o Hyper-V activado en las características de Windows o la virtualización de Intel desactivada en la BIOS. ¿Que no me habéis entendido nada? Mirad este artículo (en inglés) donde explica con calma el problema y cómo solucionarlo.[gallery type=\"slideshow\" ids=\"292,297,300,305,308,311,313,324\"]Ahora, arrancamos la máquina virtual y nos disponemos a configurarla:Nota: Ubuntu os obliga a poner contraseña con mínimo 2 dígitos.[gallery type=\"slideshow\" ids=\"331,335,339,341,344,348,350,352,354,359,362\"]¡Done!Con eso ya está, tenéis lista la máquina virtual.La siguiente parte, donde hablamos cómo configurar las Guest Additions y cómo poner una carpeta del ordenador dentro de la máquina virtual (Shared Folders) esta aquí, en forma de vídeo.&nbsp;"
  },
  
  {
    "title": "¿Cómo desmontar unidades en Ubuntu por sudo?",
    "url": "/2016/01/29/recordatorio-como-desmontar-unidades-en-ubuntu-por-sudo/",
    "categories": "Pro-tips, Ubuntu / Linux",
    "tags": "",
    "date": "2016-01-29 01:08:07 +0100",
    





    
    "snippet": "Nota: la que funcionó fuesudo umount -t vboxsf wd ~/share/Enlace relacionado",
    "content": "Nota: la que funcionó fuesudo umount -t vboxsf wd ~/share/Enlace relacionado"
  },
  
  {
    "title": "Archivos con nombres raros en Dropbox",
    "url": "/2016/01/27/protip-archivos-con-nombres-raros-en-dropbox/",
    "categories": "Pro-tips",
    "tags": "",
    "date": "2016-01-27 18:57:42 +0100",
    





    
    "snippet": "Recientemente he empezado a tomar apuntes de la universidad con TeX (porque puedo, obviamente) y me preguntaba porque no se me sincronizaban los archivos de mi portátil con el de sobremesa, hasta q...",
    "content": "Recientemente he empezado a tomar apuntes de la universidad con TeX (porque puedo, obviamente) y me preguntaba porque no se me sincronizaban los archivos de mi portátil con el de sobremesa, hasta que he descubierto que Dropbox no admite la sincronización según una lista un tanto larga para mi gusto.Así, por ejemplo, marcaba yo mi segunda clase de Programación 2 como PGR2/2, y a Dropbox no le gustaba ni un pelo.Enlace a la página de Dropbox donde especifican los símbolos que no se pueden usarAsí que eso, post rapidito, intentaré traer un artículo potente durante el finde."
  }
  
]

